{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///react-grid-layout.min.js","webpack:///webpack/bootstrap 34cf3ceb7e654fc8b8e1","webpack:///./index-dev.js","webpack:///external \"React\"","webpack:///./lib/utils.js","webpack:///./lib/mixins/PureDeepRenderMixin.js","webpack:///../react-resizable/~/object-assign/index.js","webpack:///./lib/ReactGridLayout.jsx","webpack:///./lib/mixins/WidthListeningMixin.js","webpack:///./~/react/lib/ReactComponentWithPureRenderMixin.js","webpack:///../react-resizable/build/Resizable.js","webpack:///./lib/GridItem.jsx","webpack:///./lib/ResponsiveReactGridLayout.jsx","webpack:///./lib/responsiveUtils.js","webpack:///../react-resizable/index.js","webpack:///./~/deep-equal/index.js","webpack:///./~/deep-equal/lib/is_arguments.js","webpack:///./~/deep-equal/lib/keys.js","webpack:///./~/react/lib/cloneWithProps.js","webpack:///./~/react/lib/shallowEqual.js","webpack:///../react-resizable/build/ResizableBox.js","webpack:///../react-resizable/build/cloneElement.js","webpack:///../react-resizable/~/react-draggable/index.js","webpack:///../react-resizable/~/react-draggable/lib/draggable.js","webpack:///../react-resizable/~/react-draggable/~/classnames/index.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_1__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","i","_m","args","slice","fn","a","b","apply","concat","Responsive","assign","utils","bottom","layout","bottomY","max","len","length","y","h","clone","obj","collides","l1","l2","x","w","compact","verticalCompact","compareWith","getStatics","out","sorted","sortLayoutItemsByRowCol","l","compactItem","push","indexOf","moved","getFirstCollision","correctBounds","bounds","collidesWith","cols","getLayoutItem","layoutItem","getAllCollisions","moveElement","isUserAction","movingUp","undefined","reverse","collisions","collision","moveElementAwayFromCollision","itemToMove","fakeItem","Math","perc","num","setTransform","style","coords","replace","transform","WebkitTransform","MozTransform","msTransform","OTransform","sort","synchronizeLayoutWithChildren","initialLayout","children","Array","isArray","child","exists","key","g","props","_grid","validateLayout","min","contextName","subProps","Error","j","deepEqual","PureDeepRenderMixin","shouldComponentUpdate","nextProps","nextState","state","ToObject","val","TypeError","Object","target","source","from","keys","to","s","arguments","_objectWithoutProperties","prototype","hasOwnProperty","_extends","React","GridItem","WidthListeningMixin","ReactGridLayout","createClass","displayName","mixins","propTypes","autoSize","PropTypes","bool","number","draggableCancel","string","draggableHandle","propName","componentName","layouts","margin","array","rowHeight","isDraggable","isResizable","useCSSTransforms","onLayoutChange","func","onDragStart","onDrag","onDragStop","onResizeStart","onResize","onResizeStop","node","Children","forEach","list","getDefaultProps","getInitialState","activeDrag","isMounted","width","initialWidth","componentDidMount","setState","componentWillReceiveProps","onWidthChange","JSON","stringify","componentDidUpdate","prevProps","prevState","containerHeight","_ref","e","element","position","oldL","placeholder","size","createElement","isPlaceholder","className","containerWidth","processGridItem","draggable","resizable","drag","moveOnStartChange","cancel","handle","usePercentages","render","_props","height","map","listenToWindowResize","window","addEventListener","onWindowResize","componentWillUnmount","removeEventListener","getDOMNode","offsetWidth","shallowEqual","ReactComponentWithPureRenderMixin","calcWH","_ref2","initialHeight","left","top","Draggable","PureRenderMixin","cloneElement","isRequired","handleSize","draggableOpts","object","constraintsToBounds","resizing","refs","resetState","mins","minConstraints","maxes","maxConstraints","Infinity","right","resizeHandler","handlerName","me","ref","onStop","onStart","constraintError","name","cloneWithProps","code","Resizable","minW","maxW","minH","maxH","calcPosition","calcXY","round","floor","createStyle","pos","mixinDraggable","start","onDragHandler","mixinResizable","maxWidth","onResizeHandler","_me$calcXY","_me$calcWH","join","responsiveUtils","ResponsiveReactGridLayout","breakpoint","breakpoints","k","onBreakpointChange","lg","md","sm","xs","xxs","getBreakpointFromWidth","getColsFromBreakpoint","findOrGenerateResponsiveLayout","newLayout","verticalLayout","newState","parse","sortBreakpoints","matching","breakpointName","lastBreakpoint","breakpointsSorted","breakpointsAbove","ResizableBox","isUndefinedOrNull","value","isBuffer","copy","objEquiv","opts","isArguments","pSlice","ka","objectKeys","kb","actual","expected","Date","getTime","strict","supported","toString","unsupported","propertyIsEnumerable","supportsArgumentsClass","shim","mergeProps","currentProps","childProps","newProps","extend","hasOwn","RESERVED","resolve","src","joinClasses","version","split","parseFloat","MockLegacyFactory","constructor","ConvenienceConstructor","isReactLegacyFactory","type","objA","objB","_slicedToArray","arr","Symbol","iterator","_arr","_n","_d","_e","_s","_i","next","done","err","lockAspectRatio","aspectRatio","event","widthChanged","heightChanged","_preserveAspectRatio","preserveAspectRatio","_preserveAspectRatio2","createUIEvent","_pendingState","clientY","clientX","canDragY","axis","canDragX","isFunction","findInArray","callback","matchesSelector","el","selector","method","getControlPosition","touches","addEvent","handler","attachEvent","removeEvent","detachEvent","outerHeight","clientHeight","computedStyle","getComputedStyle","int","borderTopWidth","borderBottomWidth","outerWidth","clientWidth","borderLeftWidth","borderRightWidth","innerHeight","paddingTop","paddingBottom","innerWidth","paddingLeft","paddingRight","isNum","isNaN","parseInt","getBoundPosition","parent","parentNode","nodeStyle","parentStyle","offsetLeft","marginLeft","offsetTop","marginTop","snapToGrid","grid","pendingX","pendingY","addUserSelectStyles","enableUserSelectHack","document","body","getAttribute","setAttribute","userSelectStyle","removeUserSelectStyles","createCSSTransform","emptyFunction","classNames","eventsFor","touch","move","end","mouse","dragEventFor","oneOf","oneOfType","shape","Number","arrayOf","zIndex","onMouseDown","handleDrag","handleDragEnd","NaN","dragging","offsetX","offsetY","handleDragStart","shouldStart","dragPoint","shouldUpdate","ev","preventDefault","onTouchStart","childStyle","touchHacks","touchAction","react-draggable-dragging","react-draggable-dragged","dragged","only","onMouseUp","onTouchEnd","arg","classes","substr","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__"],"mappings":"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","file":"react-grid-layout.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"React\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"React\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactGridLayout\"] = factory(require(\"React\"));\n\telse\n\t\troot[\"ReactGridLayout\"] = factory(root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"React\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"React\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactGridLayout\"] = factory(require(\"React\"));\n\telse\n\t\troot[\"ReactGridLayout\"] = factory(root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ((function(modules) {\n\t// Check all modules for deduplicated modules\n\tfor(var i in modules) {\n\t\tswitch(typeof modules[i]) {\n\t\tcase \"number\":\n\t\t\t// Module is a copy of another module\n\t\t\tmodules[i] = modules[modules[i]];\n\t\t\tbreak;\n\t\tcase \"object\":\n\t\t\t// Module can be created from a template\n\t\t\tmodules[i] = (function(_m) {\n\t\t\t\tvar args = _m.slice(1), fn = modules[_m[0]];\n\t\t\t\treturn function (a,b,c) {\n\t\t\t\t\tfn.apply(null, [a,b,c].concat(args));\n\t\t\t\t};\n\t\t\t}(modules[i]));\n\t\t}\n\t}\n\treturn modules;\n}([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tmodule.exports = __webpack_require__(5);\n\tmodule.exports.Responsive = __webpack_require__(10);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar assign = __webpack_require__(16);\n\n\tvar utils = module.exports = {\n\n\t  /**\n\t   * Return the bottom coordinate of the layout.\n\t   *\n\t   * @param  {Array} layout Layout array.\n\t   * @return {Number}       Bottom coordinate.\n\t   */\n\t  bottom: function bottom(layout) {\n\t    var max = 0,\n\t        bottomY;\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      bottomY = layout[i].y + layout[i].h;\n\t      if (bottomY > max) max = bottomY;\n\t    }\n\t    return max;\n\t  },\n\n\t  /**\n\t   * Clones a shallow object.\n\t   * @param  {Object} obj Object to clone.\n\t   * @return {Object}   Cloned object.\n\t   */\n\t  clone: function clone(obj) {\n\t    return assign({}, obj);\n\t  },\n\n\t  /**\n\t   * Given two layouts, check if they collide.\n\t   *\n\t   * @param  {Object} l1 Layout object.\n\t   * @param  {Object} l2 Layout object.\n\t   * @return {Boolean}   True if colliding.\n\t   */\n\t  collides: function collides(l1, l2) {\n\t    if (l1 === l2) {\n\t      return false;\n\t    } // same element\n\t    if (l1.x + l1.w <= l2.x) {\n\t      return false;\n\t    } // l1 is left of l2\n\t    if (l1.x >= l2.x + l2.w) {\n\t      return false;\n\t    } // l1 is right of l2\n\t    if (l1.y + l1.h <= l2.y) {\n\t      return false;\n\t    } // l1 is above l2\n\t    if (l1.y >= l2.y + l2.h) {\n\t      return false;\n\t    } // l1 is below l2\n\t    return true; // boxes overlap\n\t  },\n\n\t  /**\n\t   * Given a layout, compact it. This involves going down each y coordinate and removing gaps\n\t   * between items.\n\t   *\n\t   * @param  {Array} layout Layout.\n\t   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n\t   *   vertically.\n\t   * @return {Array}       Compacted Layout.\n\t   */\n\t  compact: function compact(layout, verticalCompact) {\n\t    // Statics go in the compareWith array right away so items flow around them.\n\t    var compareWith = utils.getStatics(layout),\n\t        out = [];\n\t    // We go through the items by row and column.\n\t    var sorted = utils.sortLayoutItemsByRowCol(layout);\n\n\t    for (var i = 0, len = sorted.length; i < len; i++) {\n\t      var l = sorted[i];\n\n\t      // Don't move static elements\n\t      if (!l['static']) {\n\t        l = utils.compactItem(compareWith, l, verticalCompact);\n\n\t        // Add to comparison array. We only collide with items before this one.\n\t        // Statics are already in this array.\n\t        compareWith.push(l);\n\t      }\n\n\t      // Add to output array to make sure they still come out in the right order.\n\t      out[layout.indexOf(l)] = l;\n\n\t      // Clear moved flag, if it exists.\n\t      delete l.moved;\n\t    }\n\n\t    return out;\n\t  },\n\n\t  compactItem: function compactItem(compareWith, l, verticalCompact) {\n\t    if (verticalCompact) {\n\t      // Move the element up as far as it can go without colliding.\n\t      while (l.y > 0 && !utils.getFirstCollision(compareWith, l)) {\n\t        l.y--;\n\t      }\n\t    }\n\n\t    // Move it down, and keep moving it down if it's colliding.\n\t    var collides;\n\t    while (collides = utils.getFirstCollision(compareWith, l)) {\n\t      l.y = collides.y + collides.h;\n\t    }\n\t    return l;\n\t  },\n\n\t  /**\n\t   * Given a layout, make sure all elements fit within its bounds.\n\t   *\n\t   * @param  {Array} layout Layout array.\n\t   * @param  {Number} bounds Number of columns.\n\t   * @return {[type]}        [description]\n\t   */\n\t  correctBounds: function correctBounds(layout, bounds) {\n\t    var collidesWith = utils.getStatics(layout);\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      var l = layout[i];\n\t      // Overflows right\n\t      if (l.x + l.w > bounds.cols) l.x = bounds.cols - l.w;\n\t      // Overflows left\n\t      if (l.x < 0) {\n\t        l.x = 0;\n\t        l.w = bounds.cols;\n\t      }\n\t      if (!l['static']) collidesWith.push(l);else {\n\t        // If this is static and collides with other statics, we must move it down.\n\t        // We have to do something nicer than just letting them overlap.\n\t        while (utils.getFirstCollision(collidesWith, l)) {\n\t          l.y++;\n\t        }\n\t      }\n\t    }\n\t    return layout;\n\t  },\n\n\t  /**\n\t   * Get a layout item by ID. Used so we can override later on if necessary.\n\t   *\n\t   * @param  {Array}  layout Layout array.\n\t   * @param  {Number} id     ID\n\t   * @return {LayoutItem}    Item at ID.\n\t   */\n\t  getLayoutItem: function getLayoutItem(layout, id) {\n\t    id = '' + id;\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      if ('' + layout[i].i === id) {\n\t        return layout[i];\n\t      }\n\t    }\n\t  },\n\n\t  /**\n\t   * Returns the first item this layout collides with.\n\t   * It doesn't appear to matter which order we approach this from, although\n\t   * perhaps that is the wrong thing to do.\n\t   *\n\t   * @param  {Object} layoutItem Layout item.\n\t   * @return {Object|undefined}  A colliding layout item, or undefined.\n\t   */\n\t  getFirstCollision: function getFirstCollision(layout, layoutItem) {\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      if (utils.collides(layout[i], layoutItem)) {\n\t        return layout[i];\n\t      }\n\t    }\n\t  },\n\n\t  getAllCollisions: function getAllCollisions(layout, layoutItem) {\n\t    var out = [];\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      if (utils.collides(layout[i], layoutItem)) out.push(layout[i]);\n\t    }\n\t    return out;\n\t  },\n\n\t  /**\n\t   * Get all static elements.\n\t   * @param  {Array} layout Array of layout objects.\n\t   * @return {Array}        Array of static layout items..\n\t   */\n\t  getStatics: function getStatics(layout) {\n\t    var out = [];\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      if (layout[i]['static']) out.push(layout[i]);\n\t    }\n\t    return out;\n\t  },\n\n\t  /**\n\t   * Move an element. Responsible for doing cascading movements of other elements.\n\t   *\n\t   * @param  {Array}      layout Full layout to modify.\n\t   * @param  {LayoutItem} l      element to move.\n\t   * @param  {Number}     [x]    X position in grid units.\n\t   * @param  {Number}     [y]    Y position in grid units.\n\t   * @param  {Boolean}    [isUserAction] If true, designates that the item we're moving is\n\t   *                                     being dragged/resized by th euser.\n\t   */\n\t  moveElement: function moveElement(layout, l, x, y, isUserAction) {\n\t    if (l['static']) {\n\t      return layout;\n\t    } // Short-circuit if nothing to do.\n\t    if (l.y === y && l.x === x) {\n\t      return layout;\n\t    }var movingUp = l.y > y;\n\t    // This is quite a bit faster than extending the object\n\t    if (x !== undefined) l.x = x;\n\t    if (y !== undefined) l.y = y;\n\t    l.moved = true;\n\n\t    // If this collides with anything, move it.\n\t    // When doing this comparison, we have to sort the items we compare with\n\t    // to ensure, in the case of multiple collisions, that we're getting the\n\t    // nearest collision.\n\t    var sorted = utils.sortLayoutItemsByRowCol(layout);\n\t    if (movingUp) sorted = sorted.reverse();\n\t    var collisions = utils.getAllCollisions(sorted, l);\n\n\t    // Move each item that collides away from this element.\n\t    for (var i = 0, len = collisions.length; i < len; i++) {\n\t      var collision = collisions[i];\n\t      // console.log('resolving collision between', l.i, 'at', l.y, 'and', collision.i, 'at', collision.y);\n\n\t      // Short circuit so we can't infinite loop\n\t      if (collision.moved) continue;\n\n\t      // This makes it feel a bit more precise by waiting to swap for just a bit when moving up.\n\t      if (l.y > collision.y && l.y - collision.y > collision.h / 4) continue;\n\n\t      // Don't move static items - we have to move *this* element away\n\t      if (collision['static']) {\n\t        layout = utils.moveElementAwayFromCollision(layout, collision, l, isUserAction);\n\t      } else {\n\t        layout = utils.moveElementAwayFromCollision(layout, l, collision, isUserAction);\n\t      }\n\t    }\n\n\t    return layout;\n\t  },\n\n\t  /**\n\t   * This is where the magic needs to happen - given a collision, move an element away from the collision.\n\t   * We attempt to move it up if there's room, otherwise it goes below.\n\t   *\n\t   * @param  {Array} layout            Full layout to modify.\n\t   * @param  {LayoutItem} collidesWith Layout item we're colliding with.\n\t   * @param  {LayoutItem} itemToMove   Layout item we're moving.\n\t   * @param  {Boolean} [isUserAction]  If true, designates that the item we're moving is being dragged/resized\n\t   *                                   by the user.\n\t   */\n\t  moveElementAwayFromCollision: function moveElementAwayFromCollision(layout, collidesWith, itemToMove, isUserAction) {\n\n\t    // If there is enough space above the collision to put this element, move it there.\n\t    // We only do this on the main collision as this can get funky in cascades and cause\n\t    // unwanted swapping behavior.\n\t    if (isUserAction) {\n\t      // Make a mock item so we don't modify the item here, only modify in moveElement.\n\t      var fakeItem = {\n\t        x: itemToMove.x,\n\t        y: itemToMove.y,\n\t        w: itemToMove.w,\n\t        h: itemToMove.h };\n\t      fakeItem.y = Math.max(collidesWith.y - itemToMove.h, 0);\n\t      if (!utils.getFirstCollision(layout, fakeItem)) {\n\t        return utils.moveElement(layout, itemToMove, undefined, fakeItem.y);\n\t      }\n\t    }\n\n\t    // Previously this was optimized to move below the collision directly, but this can cause problems\n\t    // with cascading moves, as an item may actually leapflog a collision and cause a reversal in order.\n\t    return utils.moveElement(layout, itemToMove, undefined, itemToMove.y + 1);\n\t  },\n\n\t  /**\n\t   * Helper to convert a number to a percentage string.\n\t   *\n\t   * @param  {Number} num Any number\n\t   * @return {String}     That number as a percentage.\n\t   */\n\t  perc: function perc(num) {\n\t    return num * 100 + '%';\n\t  },\n\n\t  setTransform: function setTransform(style, coords) {\n\t    // Replace unitless items with px\n\t    var x = ('' + coords[0]).replace(/(\\d)$/, '$1px');\n\t    var y = ('' + coords[1]).replace(/(\\d)$/, '$1px');\n\t    style.transform = 'translate(' + x + ',' + y + ')';\n\t    style.WebkitTransform = 'translate(' + x + ',' + y + ')';\n\t    style.MozTransform = 'translate(' + x + ',' + y + ')';\n\t    style.msTransform = 'translate(' + x + ',' + y + ')';\n\t    style.OTransform = 'translate(' + x + ',' + y + ')';\n\t    return style;\n\t  },\n\n\t  /**\n\t   * Get layout items sorted from top left to right and down.\n\t   *\n\t   * @return {Array} Array of layout objects.\n\t   * @return {Array}        Layout, sorted static items first.\n\t   */\n\t  sortLayoutItemsByRowCol: function sortLayoutItemsByRowCol(layout) {\n\t    return [].concat(layout).sort(function (a, b) {\n\t      if (a.y > b.y || a.y === b.y && a.x > b.x) {\n\t        return 1;\n\t      }\n\t      return -1;\n\t    });\n\t  },\n\n\t  /**\n\t   * Generate a layout using the initialLayout an children as a template.\n\t   * Missing entries will be added, extraneous ones will be truncated.\n\t   *\n\t   * @param  {Array}  initialLayout Layout passed in through props.\n\t   * @param  {String} breakpoint    Current responsive breakpoint.\n\t   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n\t   *   vertically.\n\t   * @return {Array}                Working layout.\n\t   */\n\t  synchronizeLayoutWithChildren: function synchronizeLayoutWithChildren(initialLayout, children, cols, verticalCompact) {\n\t    // ensure 'children' is always an array\n\t    if (!Array.isArray(children)) {\n\t      children = [children];\n\t    }\n\t    initialLayout = initialLayout || [];\n\n\t    // Generate one layout item per child.\n\t    var layout = [];\n\t    for (var i = 0, len = children.length; i < len; i++) {\n\t      var child = children[i];\n\t      // Don't overwrite if it already exists.\n\t      var exists = utils.getLayoutItem(initialLayout, child.key);\n\t      if (exists) {\n\t        // Ensure 'i' is always a string\n\t        exists.i = '' + exists.i;\n\t        layout.push(exists);\n\t        continue;\n\t      }\n\t      // New item: attempt to use a layout item from the child, if it exists.\n\t      var g = child.props._grid;\n\t      if (g) {\n\t        utils.validateLayout([g], 'ReactGridLayout.child');\n\t        // Validated; add it to the layout. Bottom 'y' possible is the bottom of the layout.\n\t        // This allows you to do nice stuff like specify {y: Infinity}\n\t        if (verticalCompact) {\n\t          layout.push(assign({}, g, { y: Math.min(utils.bottom(layout), g.y), i: child.key }));\n\t        } else {\n\t          layout.push(assign({}, g, { y: g.y, i: child.key }));\n\t        }\n\t      } else {\n\t        // Nothing provided: ensure this is added to the bottom\n\t        layout.push({ w: 1, h: 1, x: 0, y: utils.bottom(layout), i: child.key });\n\t      }\n\t    }\n\n\t    // Correct the layout.\n\t    layout = utils.correctBounds(layout, { cols: cols });\n\t    layout = utils.compact(layout, verticalCompact);\n\n\t    return layout;\n\t  },\n\n\t  /**\n\t   * Validate a layout. Throws errors.\n\t   *\n\t   * @param  {Array}  layout        Array of layout items.\n\t   * @param  {String} [contextName] Context name for errors.\n\t   * @throw  {Error}                Validation error.\n\t   */\n\t  validateLayout: function validateLayout(layout, contextName) {\n\t    contextName = contextName || 'Layout';\n\t    var subProps = ['x', 'y', 'w', 'h'];\n\t    if (!Array.isArray(layout)) throw new Error(contextName + ' must be an array!');\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      for (var j = 0; j < subProps.length; j++) {\n\t        if (typeof layout[i][subProps[j]] !== 'number') {\n\t          throw new Error('ReactGridLayout: ' + contextName + '[' + i + '].' + subProps[j] + ' must be a Number!');\n\t        }\n\t      }\n\t      if (layout[i]['static'] !== undefined && typeof layout[i]['static'] !== 'boolean') {\n\t        throw new Error('ReactGridLayout: ' + contextName + '[' + i + '].static must be a Boolean!');\n\t      }\n\t    }\n\t  }\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar deepEqual = __webpack_require__(13);\n\n\t// Like PureRenderMixin, but with deep comparisons.\n\tvar PureDeepRenderMixin = {\n\t  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {\n\t    return !deepEqual(this.props, nextProps) || !deepEqual(this.state, nextState);\n\t  }\n\t};\n\n\tmodule.exports = PureDeepRenderMixin;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction ToObject(val) {\n\t\tif (val == null) {\n\t\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t\t}\n\n\t\treturn Object(val);\n\t}\n\n\tmodule.exports = Object.assign || function (target, source) {\n\t\tvar from;\n\t\tvar keys;\n\t\tvar to = ToObject(target);\n\n\t\tfor (var s = 1; s < arguments.length; s++) {\n\t\t\tfrom = arguments[s];\n\t\t\tkeys = Object.keys(Object(from));\n\n\t\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\t\tto[keys[i]] = from[keys[i]];\n\t\t\t}\n\t\t}\n\n\t\treturn to;\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };\n\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\tvar React = __webpack_require__(1);\n\tvar GridItem = __webpack_require__(9);\n\tvar utils = __webpack_require__(2);\n\tvar PureDeepRenderMixin = __webpack_require__(3);\n\tvar WidthListeningMixin = __webpack_require__(6);\n\n\t/**\n\t * A reactive, fluid grid layout with draggable, resizable components.\n\t */\n\tvar ReactGridLayout = React.createClass({\n\t  displayName: 'ReactGridLayout',\n\n\t  mixins: [PureDeepRenderMixin, WidthListeningMixin],\n\n\t  propTypes: {\n\t    //\n\t    // Basic props\n\t    //\n\n\t    // If true, the container height swells and contracts to fit contents\n\t    autoSize: React.PropTypes.bool,\n\t    // # of cols.\n\t    cols: React.PropTypes.number,\n\n\t    // A selector that will not be draggable.\n\t    draggableCancel: React.PropTypes.string,\n\t    // A selector for the draggable handler\n\t    draggableHandle: React.PropTypes.string,\n\n\t    // If true, the layout will compact vertically\n\t    verticalCompact: React.PropTypes.bool,\n\n\t    // layout is an array of object with the format:\n\t    // {x: Number, y: Number, w: Number, h: Number}\n\t    layout: function layout(props, propName, componentName) {\n\t      var layout = props.layout;\n\t      // I hope you're setting the _grid property on the grid items\n\t      if (layout === undefined) {\n\t        return;\n\t      }utils.validateLayout(layout, 'layout');\n\t    },\n\n\t    layouts: function layouts(props, propName, componentName) {\n\t      if (props.layouts) {\n\t        throw new Error('ReactGridLayout does not use `layouts`: Use ReactGridLayout.Responsive.');\n\t      }\n\t    },\n\n\t    // margin between items [x, y] in px\n\t    margin: React.PropTypes.array,\n\t    // Rows have a static height, but you can change this based on breakpoints if you like\n\t    rowHeight: React.PropTypes.number,\n\n\t    //\n\t    // Flags\n\t    //\n\t    isDraggable: React.PropTypes.bool,\n\t    isResizable: React.PropTypes.bool,\n\t    // Use CSS transforms instead of top/left\n\t    useCSSTransforms: React.PropTypes.bool,\n\n\t    //\n\t    // Callbacks\n\t    //\n\n\t    // Callback so you can save the layout.\n\t    // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n\t    onLayoutChange: React.PropTypes.func,\n\n\t    // Calls when drag starts. Callback is of the signature (layout, oldItem, newItem, placeholder, e).\n\t    // All callbacks below have the same signature. 'start' and 'stop' callbacks omit the 'placeholder'.\n\t    onDragStart: React.PropTypes.func,\n\t    // Calls on each drag movement.\n\t    onDrag: React.PropTypes.func,\n\t    // Calls when drag is complete.\n\t    onDragStop: React.PropTypes.func,\n\t    //Calls when resize starts.\n\t    onResizeStart: React.PropTypes.func,\n\t    // Calls when resize movement happens.\n\t    onResize: React.PropTypes.func,\n\t    // Calls when resize is complete.\n\t    onResizeStop: React.PropTypes.func,\n\n\t    //\n\t    // Other validations\n\t    //\n\n\t    // Children must not have duplicate keys.\n\t    children: function children(props, propName, componentName) {\n\t      React.PropTypes.node.apply(this, arguments);\n\t      var children = props[propName];\n\n\t      // Check children keys for duplicates. Throw if found.\n\t      var keys = {};\n\t      React.Children.forEach(children, function (child, i, list) {\n\t        if (keys[child.key]) {\n\t          throw new Error('Duplicate child key found! This will cause problems in ReactGridLayout.');\n\t        }\n\t        keys[child.key] = true;\n\t      });\n\t    }\n\t  },\n\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      autoSize: true,\n\t      cols: 12,\n\t      rowHeight: 150,\n\t      layout: [],\n\t      margin: [10, 10],\n\t      isDraggable: true,\n\t      isResizable: true,\n\t      useCSSTransforms: true,\n\t      verticalCompact: true,\n\t      onLayoutChange: function onLayoutChange() {},\n\t      onDragStart: function onDragStart() {},\n\t      onDrag: function onDrag() {},\n\t      onDragStop: function onDragStop() {},\n\t      onResizeStart: function onResizeStart() {},\n\t      onResize: function onResize() {},\n\t      onResizeStop: function onResizeStop() {}\n\t    };\n\t  },\n\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      activeDrag: null,\n\t      isMounted: false,\n\t      layout: utils.synchronizeLayoutWithChildren(this.props.layout, this.props.children, this.props.cols, this.props.verticalCompact),\n\t      width: this.props.initialWidth\n\t    };\n\t  },\n\n\t  componentDidMount: function componentDidMount() {\n\t    // Call back with layout on mount. This should be done after correcting the layout width\n\t    // to ensure we don't rerender with the wrong width.\n\t    this.props.onLayoutChange(this.state.layout);\n\t    this.setState({ isMounted: true });\n\t  },\n\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t    // This allows you to set the width manually if you like.\n\t    // Use manual width changes in combination with `listenToWindowResize: false`\n\t    if (nextProps.width !== this.props.width) this.onWidthChange(nextProps.width);\n\n\t    // If children change, regenerate the layout.\n\t    if (nextProps.children.length !== this.props.children.length) {\n\t      this.setState({\n\t        layout: utils.synchronizeLayoutWithChildren(this.state.layout, nextProps.children, nextProps.cols, this.props.verticalCompact)\n\t      });\n\t    }\n\n\t    // Allow parent to set layout directly.\n\t    if (nextProps.layout && JSON.stringify(nextProps.layout) !== JSON.stringify(this.state.layout)) {\n\t      this.setState({\n\t        layout: utils.synchronizeLayoutWithChildren(nextProps.layout, nextProps.children, nextProps.cols, this.props.verticalCompact)\n\t      });\n\t    }\n\t  },\n\n\t  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {\n\t    // Call back so we can store the layout\n\t    // Do it only when a resize/drag is not active, otherwise there are way too many callbacks\n\t    if (this.state.layout !== prevState.layout && !this.state.activeDrag) {\n\t      this.props.onLayoutChange(this.state.layout, this.state.layouts);\n\t    }\n\t  },\n\n\t  /**\n\t   * Calculates a pixel value for the container.\n\t   * @return {String} Container height in pixels.\n\t   */\n\t  containerHeight: function containerHeight() {\n\t    if (!this.props.autoSize) {\n\t      return;\n\t    }return utils.bottom(this.state.layout) * this.props.rowHeight + this.props.margin[1] + 'px';\n\t  },\n\n\t  /**\n\t   * When the width changes, save it to state. This helps with left/width calculations.\n\t   */\n\t  onWidthChange: function onWidthChange(width) {\n\t    this.setState({ width: width });\n\t  },\n\n\t  /**\n\t   * When dragging starts\n\t   * @param {Number} i Index of the child\n\t   * @param {Number} x X position of the move\n\t   * @param {Number} y Y position of the move\n\t   * @param {Event} e The mousedown event\n\t   * @param {Element} element The current dragging DOM element\n\t   * @param {Object} position Drag information\n\t   */\n\t  onDragStart: function onDragStart(i, x, y, _ref) {\n\t    var e = _ref.e;\n\t    var element = _ref.element;\n\t    var position = _ref.position;\n\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\n\t    // No need to clone, `l` hasn't changed.\n\t    this.props.onDragStart(layout, l, l, null, e);\n\t  },\n\t  /**\n\t   * Each drag movement create a new dragelement and move the element to the dragged location\n\t   * @param {Number} i Index of the child\n\t   * @param {Number} x X position of the move\n\t   * @param {Number} y Y position of the move\n\t   * @param {Event} e The mousedown event\n\t   * @param {Element} element The current dragging DOM element\n\t   * @param {Object} position Drag information\n\t   */\n\t  onDrag: function onDrag(i, x, y, _ref) {\n\t    var e = _ref.e;\n\t    var element = _ref.element;\n\t    var position = _ref.position;\n\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t    // Clone layout item so we can pass it to the callback.\n\t    var oldL = utils.clone(l);\n\n\t    // Create placeholder (display only)\n\t    var placeholder = {\n\t      w: l.w, h: l.h, x: l.x, y: l.y, placeholder: true, i: i\n\t    };\n\n\t    // Move the element to the dragged location.\n\t    layout = utils.moveElement(layout, l, x, y, true /* isUserAction */);\n\n\t    this.props.onDrag(layout, oldL, l, placeholder, e);\n\n\t    this.setState({\n\t      layout: utils.compact(layout, this.props.verticalCompact),\n\t      activeDrag: placeholder\n\t    });\n\t  },\n\n\t  /**\n\t   * When dragging stops, figure out which position the element is closest to and update its x and y.\n\t   * @param  {Number} i Index of the child.\n\t   * @param {Number} i Index of the child\n\t   * @param {Number} x X position of the move\n\t   * @param {Number} y Y position of the move\n\t   * @param {Event} e The mousedown event\n\t   * @param {Element} element The current dragging DOM element\n\t   * @param {Object} position Drag information\n\t   */\n\t  onDragStop: function onDragStop(i, x, y, _ref) {\n\t    var e = _ref.e;\n\t    var element = _ref.element;\n\t    var position = _ref.position;\n\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t    var oldL = utils.clone(l);\n\n\t    // Move the element here\n\t    layout = utils.moveElement(layout, l, x, y, true /* isUserAction */);\n\n\t    this.props.onDragStop(layout, oldL, l, null, e);\n\n\t    // Set state\n\t    this.setState({ layout: utils.compact(layout, this.props.verticalCompact), activeDrag: null });\n\t  },\n\n\t  onResizeStart: function onResizeStart(i, w, h, _ref) {\n\t    var e = _ref.e;\n\t    var element = _ref.element;\n\t    var size = _ref.size;\n\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\n\t    // No need to clone, item hasn't changed\n\t    this.props.onResizeStart(layout, l, l, null, e);\n\t  },\n\n\t  onResize: function onResize(i, w, h, _ref) {\n\t    var e = _ref.e;\n\t    var element = _ref.element;\n\t    var size = _ref.size;\n\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t    var oldL = utils.clone(l);\n\n\t    // Set new width and height.\n\t    l.w = w;\n\t    l.h = h;\n\n\t    // Create placeholder element (display only)\n\t    var placeholder = {\n\t      w: w, h: h, x: l.x, y: l.y, placeholder: true, i: i\n\t    };\n\n\t    this.props.onResize(layout, oldL, l, placeholder, e);\n\n\t    // Re-compact the layout and set the drag placeholder.\n\t    this.setState({ layout: utils.compact(layout, this.props.verticalCompact), activeDrag: placeholder });\n\t  },\n\n\t  onResizeStop: function onResizeStop(i, x, y, _ref) {\n\t    var e = _ref.e;\n\t    var element = _ref.element;\n\t    var size = _ref.size;\n\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t    var oldL = utils.clone(l);\n\n\t    this.props.onResizeStop(layout, oldL, l, null, e);\n\n\t    this.setState({ activeDrag: null, layout: utils.compact(layout, this.props.verticalCompact) });\n\t  },\n\n\t  /**\n\t   * Create a placeholder object.\n\t   * @return {Element} Placeholder div.\n\t   */\n\t  placeholder: function placeholder() {\n\t    if (!this.state.activeDrag) {\n\t      return '';\n\t    } // {...this.state.activeDrag} is pretty slow, actually\n\t    return React.createElement(\n\t      GridItem,\n\t      {\n\t        w: this.state.activeDrag.w,\n\t        h: this.state.activeDrag.h,\n\t        x: this.state.activeDrag.x,\n\t        y: this.state.activeDrag.y,\n\t        i: this.state.activeDrag.i,\n\t        isPlaceholder: true,\n\t        className: 'react-grid-placeholder',\n\t        containerWidth: this.state.width,\n\t        cols: this.props.cols,\n\t        margin: this.props.margin,\n\t        rowHeight: this.props.rowHeight,\n\t        isDraggable: false,\n\t        isResizable: false,\n\t        useCSSTransforms: this.props.useCSSTransforms\n\t      },\n\t      React.createElement('div', null)\n\t    );\n\t  },\n\n\t  /**\n\t   * Given a grid item, set its style attributes & surround in a <Draggable>.\n\t   * @param  {Element} child React element.\n\t   * @param  {Number}  i     Index of element.\n\t   * @return {Element}       Element wrapped in draggable and properly placed.\n\t   */\n\t  processGridItem: function processGridItem(child) {\n\t    var i = child.key;\n\t    var l = utils.getLayoutItem(this.state.layout, i);\n\n\t    // watchStart property tells Draggable to react to changes in the start param\n\t    // Must be turned off on the item we're dragging as the changes in `activeDrag` cause rerenders\n\t    var drag = this.state.activeDrag;\n\t    var moveOnStartChange = drag && drag.i === i ? false : true;\n\n\t    // Parse 'static'. Any properties defined directly on the grid item will take precedence.\n\t    var draggable, resizable;\n\t    if (l['static'] || this.props.isDraggable === false) draggable = false;\n\t    if (l['static'] || this.props.isResizable === false) resizable = false;\n\n\t    return React.createElement(\n\t      GridItem,\n\t      _extends({\n\t        containerWidth: this.state.width,\n\t        cols: this.props.cols,\n\t        margin: this.props.margin,\n\t        rowHeight: this.props.rowHeight,\n\t        moveOnStartChange: moveOnStartChange,\n\t        cancel: this.props.draggableCancel,\n\t        handle: this.props.draggableHandle,\n\t        onDragStop: this.onDragStop,\n\t        onDragStart: this.onDragStart,\n\t        onDrag: this.onDrag,\n\t        onResizeStart: this.onResizeStart,\n\t        onResize: this.onResize,\n\t        onResizeStop: this.onResizeStop,\n\t        isDraggable: draggable,\n\t        isResizable: resizable,\n\t        useCSSTransforms: this.props.useCSSTransforms && this.state.isMounted,\n\t        usePercentages: !this.state.isMounted\n\t      }, l),\n\t      child\n\t    );\n\t  },\n\n\t  render: function render() {\n\t    // Calculate classname\n\t    var _props = this.props;\n\t    var className = _props.className;\n\n\t    var props = _objectWithoutProperties(_props, ['className']);\n\n\t    className = 'react-grid-layout ' + (className || '');\n\n\t    return React.createElement(\n\t      'div',\n\t      _extends({}, props, { className: className, style: { height: this.containerHeight() } }),\n\t      React.Children.map(this.props.children, this.processGridItem),\n\t      this.placeholder()\n\t    );\n\t  }\n\t});\n\n\tmodule.exports = ReactGridLayout;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar React = __webpack_require__(1);\n\n\t/**\n\t * A simple mixin that provides facility for listening to container resizes.\n\t */\n\tvar WidthListeningMixin = {\n\n\t  propTypes: {\n\t    // This allows setting this on the server side\n\t    initialWidth: React.PropTypes.number,\n\n\t    // If false, you should supply width yourself. Good if you want to debounce resize events\n\t    // or reuse a handler from somewhere else.\n\t    listenToWindowResize: React.PropTypes.bool\n\t  },\n\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      initialWidth: 1280,\n\t      listenToWindowResize: true\n\t    };\n\t  },\n\n\t  componentDidMount: function componentDidMount() {\n\t    if (this.props.listenToWindowResize) {\n\t      window.addEventListener('resize', this.onWindowResize);\n\t      // This is intentional. Once to properly set the breakpoint and resize the elements,\n\t      // and again to compensate for any scrollbar that appeared because of the first step.\n\t      this.onWindowResize();\n\t      this.onWindowResize();\n\t    }\n\t  },\n\n\t  componentWillUnmount: function componentWillUnmount() {\n\t    window.removeEventListener('resize', this.onWindowResize);\n\t  },\n\n\t  /**\n\t   * On window resize, update width.\n\t   */\n\t  onWindowResize: function onWindowResize() {\n\t    this.onWidthChange(this.getDOMNode().offsetWidth);\n\t  }\n\n\t};\n\n\tmodule.exports = WidthListeningMixin;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2015, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t* @providesModule ReactComponentWithPureRenderMixin\n\t*/\n\n\t'use strict';\n\n\tvar shallowEqual = __webpack_require__(18);\n\n\t/**\n\t * If your React component's render function is \"pure\", e.g. it will render the\n\t * same result given the same props and state, provide this Mixin for a\n\t * considerable performance boost.\n\t *\n\t * Most React components have pure render functions.\n\t *\n\t * Example:\n\t *\n\t *   var ReactComponentWithPureRenderMixin =\n\t *     require('ReactComponentWithPureRenderMixin');\n\t *   React.createClass({\n\t *     mixins: [ReactComponentWithPureRenderMixin],\n\t *\n\t *     render: function() {\n\t *       return <div className={this.props.className}>foo</div>;\n\t *     }\n\t *   });\n\t *\n\t * Note: This only checks shallow equality for props and state. If these contain\n\t * complex data structures this mixin may have false-negatives for deeper\n\t * differences. Only mixin to components which have simple props and state, or\n\t * use `forceUpdate()` when you know deep data structures have changed.\n\t */\n\tvar ReactComponentWithPureRenderMixin = {\n\t  shouldComponentUpdate: function(nextProps, nextState) {\n\t    return !shallowEqual(this.props, nextProps) ||\n\t           !shallowEqual(this.state, nextState);\n\t  }\n\t};\n\n\tmodule.exports = ReactComponentWithPureRenderMixin;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar _extends = Object.assign || function (target) {\n\t  for (var i = 1; i < arguments.length; i++) {\n\t    var source = arguments[i];for (var key in source) {\n\t      if (Object.prototype.hasOwnProperty.call(source, key)) {\n\t        target[key] = source[key];\n\t      }\n\t    }\n\t  }return target;\n\t};\n\n\tvar React = __webpack_require__(1);\n\tvar Draggable = __webpack_require__(21);\n\tvar PureRenderMixin = __webpack_require__(7);\n\tvar assign = __webpack_require__(4);\n\tvar cloneElement = __webpack_require__(20);\n\n\tvar Resizable = module.exports = React.createClass({\n\t  displayName: 'Resizable',\n\t  mixins: [PureRenderMixin],\n\n\t  propTypes: {\n\t    // Require that one and only one child be present.\n\t    children: React.PropTypes.element.isRequired,\n\t    // Functions\n\t    onResizeStop: React.PropTypes.func,\n\t    onResizeStart: React.PropTypes.func,\n\t    onResize: React.PropTypes.func,\n\n\t    width: React.PropTypes.number.isRequired,\n\t    height: React.PropTypes.number.isRequired,\n\t    // If you change this, be sure to update your css\n\t    handleSize: React.PropTypes.array,\n\t    // These will be passed wholesale to react-draggable\n\t    draggableOpts: React.PropTypes.object\n\t  },\n\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      handleSize: [20, 20]\n\t    };\n\t  },\n\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      bounds: this.constraintsToBounds(),\n\t      initialWidth: this.props.width,\n\t      initialHeight: this.props.height\n\t    };\n\t  },\n\n\t  componentWillReceiveProps: function componentWillReceiveProps(props) {\n\t    if (!this.state.resizing) {\n\t      this.setState({\n\t        initialWidth: props.width,\n\t        initialHeight: props.height\n\t      });\n\t      this.refs.draggable.resetState();\n\t    }\n\t  },\n\n\t  constraintsToBounds: function constraintsToBounds() {\n\t    var p = this.props;\n\t    var mins = p.minConstraints || p.handleSize;\n\t    var maxes = p.maxConstraints || [Infinity, Infinity];\n\t    return {\n\t      left: mins[0] - p.width,\n\t      top: mins[1] - p.height,\n\t      right: maxes[0] - p.width,\n\t      bottom: maxes[1] - p.height\n\t    };\n\t  },\n\n\t  /**\n\t   * Wrapper around drag events to provide more useful data.\n\t   *\n\t   * @param  {String} handlerName Handler name to wrap.\n\t   * @return {Function}           Handler function.\n\t   */\n\t  resizeHandler: function resizeHandler(handlerName) {\n\t    var me = this;\n\t    return function (e, _ref) {\n\t      var node = _ref.node;\n\t      var position = _ref.position;\n\n\t      me.props[handlerName] && me.props[handlerName](e, { node: node, size: calcWH(me.state, position) });\n\n\t      if (handlerName === 'onResizeStart') {\n\t        me.setState({ resizing: true });\n\t      } else if (handlerName === 'onResizeStop') {\n\t        me.setState({ resizing: false });\n\t      }\n\t    };\n\t  },\n\n\t  render: function render() {\n\t    var p = this.props,\n\t        s = this.state;\n\n\t    // What we're doing here is getting the child of this element, and cloning it with this element's props.\n\t    // We are then defining its children as:\n\t    // Its original children (resizable's child's children), and\n\t    // A draggable handle.\n\t    return cloneElement(p.children, assign({}, p, {\n\t      children: [p.children.props.children, React.createElement(Draggable, _extends({}, p.draggableOpts, {\n\t        ref: 'draggable',\n\t        onStop: this.resizeHandler('onResizeStop'),\n\t        onStart: this.resizeHandler('onResizeStart'),\n\t        onDrag: this.resizeHandler('onResize'),\n\t        bounds: this.state.bounds\n\t      }), React.createElement('span', { className: 'react-resizable-handle' }))]\n\t    }));\n\t  }\n\t});\n\n\t/**\n\t * Parse left and top coordinates.\n\t * @param  {Number} options.left Left coordinate.\n\t * @param  {Number} options.top  Top coordinate.\n\t * @return {Object}              Coordinates\n\t */\n\tfunction calcWH(_ref, _ref2) {\n\t  var initialWidth = _ref.initialWidth;\n\t  var initialHeight = _ref.initialHeight;\n\t  var left = _ref2.left;\n\t  var top = _ref2.top;\n\n\t  return { width: initialWidth + left, height: initialHeight + top };\n\t}\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar React = __webpack_require__(1);\n\tvar cloneWithProps = __webpack_require__(17);\n\tvar utils = __webpack_require__(2);\n\tvar Draggable = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"react-draggable\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\tvar Resizable = __webpack_require__(12).Resizable;\n\tvar PureDeepRenderMixin = __webpack_require__(3);\n\n\t/**\n\t * An individual item within a ReactGridLayout.\n\t */\n\tvar GridItem = React.createClass({\n\t  displayName: 'GridItem',\n\n\t  mixins: [PureDeepRenderMixin],\n\n\t  propTypes: {\n\t    // Children must be only a single element\n\t    children: React.PropTypes.element,\n\n\t    // General grid attributes\n\t    cols: React.PropTypes.number.isRequired,\n\t    containerWidth: React.PropTypes.number.isRequired,\n\t    rowHeight: React.PropTypes.number.isRequired,\n\t    margin: React.PropTypes.array.isRequired,\n\n\t    // These are all in grid units\n\t    x: React.PropTypes.number.isRequired,\n\t    y: React.PropTypes.number.isRequired,\n\t    w: React.PropTypes.number.isRequired,\n\t    h: React.PropTypes.number.isRequired,\n\n\t    // All optional\n\t    minW: function minW(props, propName, componentName) {\n\t      React.PropTypes.number.apply(this, arguments);\n\t      if (props.minW > props.w || props.minW > props.maxW) constraintError('minW', props);\n\t    },\n\t    maxW: function maxW(props, propName, componentName) {\n\t      React.PropTypes.number.apply(this, arguments);\n\t      if (props.maxW < props.w || props.maxW < props.minW) constraintError('maxW', props);\n\t    },\n\t    minH: function minH(props, propName, componentName) {\n\t      React.PropTypes.number.apply(this, arguments);\n\t      if (props.minH > props.h || props.minH > props.maxH) constraintError('minH', props);\n\t    },\n\t    maxH: function maxH(props, propName, componentName) {\n\t      React.PropTypes.number.apply(this, arguments);\n\t      if (props.maxH < props.h || props.maxH < props.minH) constraintError('maxH', props);\n\t    },\n\n\t    // ID is nice to have for callbacks\n\t    i: React.PropTypes.string.isRequired,\n\n\t    // If true, item will be repositioned when x/y/w/h change\n\t    moveOnStartChange: React.PropTypes.bool,\n\n\t    // Functions\n\t    onDragStop: React.PropTypes.func,\n\t    onDragStart: React.PropTypes.func,\n\t    onDrag: React.PropTypes.func,\n\t    onResizeStop: React.PropTypes.func,\n\t    onResizeStart: React.PropTypes.func,\n\t    onResize: React.PropTypes.func,\n\n\t    // Flags\n\t    isDraggable: React.PropTypes.bool,\n\t    isResizable: React.PropTypes.bool,\n\t    // Use CSS transforms instead of top/left\n\t    useCSSTransforms: React.PropTypes.bool,\n\t    isPlaceholder: React.PropTypes.bool,\n\n\t    // Others\n\t    className: React.PropTypes.string,\n\t    // Selector for draggable handle\n\t    handle: React.PropTypes.string,\n\t    // Selector for draggable cancel (see react-draggable)\n\t    cancel: React.PropTypes.string\n\t  },\n\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      isDraggable: true,\n\t      isResizable: true,\n\t      useCSSTransforms: true,\n\t      className: '',\n\t      cancel: '',\n\t      minH: 1,\n\t      minW: 1,\n\t      maxH: Infinity,\n\t      maxW: Infinity\n\t    };\n\t  },\n\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      resizing: false,\n\t      className: ''\n\t    };\n\t  },\n\n\t  /**\n\t   * Return position on the page given an x, y, w, h.\n\t   * left, top, width, height are all in pixels.\n\t   * @param  {Number}  x             X coordinate in grid units.\n\t   * @param  {Number}  y             Y coordinate in grid units.\n\t   * @param  {Number}  w             W coordinate in grid units.\n\t   * @param  {Number}  h             H coordinate in grid units.\n\t   * @return {Object}                Object containing coords.\n\t   */\n\t  calcPosition: function calcPosition(x, y, w, h) {\n\t    var p = this.props;\n\t    var width = p.containerWidth - p.margin[0];\n\t    var out = {\n\t      left: width * (x / p.cols) + p.margin[0],\n\t      top: p.rowHeight * y + p.margin[1],\n\t      width: width * (w / p.cols) - p.margin[0],\n\t      height: h * p.rowHeight - p.margin[1]\n\t    };\n\t    return out;\n\t  },\n\n\t  /**\n\t   * Translate x and y coordinates from pixels to grid units.\n\t   * @param  {Number} options.left  Left offset in pixels.\n\t   * @param  {Number} options.top   Top offset in pixels.\n\t   * @return {Object}               x and y in grid units.\n\t   */\n\t  calcXY: function calcXY(_ref) {\n\t    var left = _ref.left;\n\t    var top = _ref.top;\n\n\t    left = left - this.props.margin[0];\n\t    top = top - this.props.margin[1];\n\t    // This is intentional; because so much of the logic on moving boxes up/down relies\n\t    // on an exact y position, we only round the x, not the y.\n\t    var x = Math.round(left / this.props.containerWidth * this.props.cols);\n\t    var y = Math.floor(top / this.props.rowHeight);\n\t    x = Math.max(Math.min(x, this.props.cols), 0);\n\t    y = Math.max(y, 0);\n\t    return { x: x, y: y };\n\t  },\n\n\t  /**\n\t   * Given a height and width in pixel values, calculate grid units.\n\t   * @param  {Number} options.height Height in pixels.\n\t   * @param  {Number} options.width  Width in pixels.\n\t   * @return {Object}                w, h as grid units.\n\t   */\n\t  calcWH: function calcWH(_ref) {\n\t    var height = _ref.height;\n\t    var width = _ref.width;\n\n\t    width = width + this.props.margin[0];\n\t    height = height + this.props.margin[1];\n\t    var w = Math.round(width / this.props.containerWidth * this.props.cols);\n\t    var h = Math.round(height / this.props.rowHeight);\n\t    w = Math.max(Math.min(w, this.props.cols - this.props.x), 0);\n\t    h = Math.max(h, 0);\n\t    return { w: w, h: h };\n\t  },\n\n\t  /**\n\t   * This is where we set the grid item's absolute placement. It gets a little tricky because we want to do it\n\t   * well when server rendering, and the only way to do that properly is to use percentage width/left because\n\t   * we don't know exactly what the browser viewport is.\n\t   * Unfortunately, CSS Transforms, which are great for performance, break in this instance because a percentage\n\t   * left is relative to the item itself, not its container! So we cannot use them on the server rendering pass.\n\t   *\n\t   * @param  {Object} pos Position object with width, height, left, top.\n\t   * @return {Object}     Style object.\n\t   */\n\t  createStyle: function createStyle(pos) {\n\t    var style = {\n\t      width: pos.width + 'px',\n\t      height: pos.height + 'px',\n\t      left: pos.left + 'px',\n\t      top: pos.top + 'px',\n\t      position: 'absolute'\n\t    };\n\n\t    // This is used for server rendering.\n\t    if (this.props.usePercentages) {\n\t      pos.left = utils.perc(pos.left / this.props.containerWidth);\n\t      style.left = pos.left;\n\t      style.width = utils.perc(pos.width / this.props.containerWidth);\n\t    }\n\n\t    // CSS Transforms support\n\t    if (this.props.useCSSTransforms) {\n\t      utils.setTransform(style, [pos.left, pos.top]);\n\t      delete style.left;\n\t      delete style.top;\n\t    }\n\n\t    return style;\n\t  },\n\n\t  /**\n\t   * Mix a Draggable instance into a child.\n\t   * @param  {Element} child    Child element.\n\t   * @param  {Object} position  Position object (pixel values)\n\t   * @return {Element}          Child wrapped in Draggable.\n\t   */\n\t  mixinDraggable: function mixinDraggable(child, position) {\n\t    return React.createElement(\n\t      Draggable,\n\t      {\n\t        start: { x: position.left, y: position.top },\n\t        moveOnStartChange: this.props.moveOnStartChange,\n\t        onStop: this.onDragHandler('onDragStop'),\n\t        onStart: this.onDragHandler('onDragStart'),\n\t        onDrag: this.onDragHandler('onDrag'),\n\t        handle: this.props.handle,\n\t        cancel: '.react-resizable-handle ' + this.props.cancel,\n\t        useCSSTransforms: this.props.useCSSTransforms\n\t      },\n\t      child\n\t    );\n\t  },\n\n\t  /**\n\t   * Mix a Resizable instance into a child.\n\t   * @param  {Element} child    Child element.\n\t   * @param  {Object} position  Position object (pixel values)\n\t   * @return {Element}          Child wrapped in Resizable.\n\t   */\n\t  mixinResizable: function mixinResizable(child, position) {\n\t    var p = this.props;\n\t    // This is the max possible width - doesn't go to infinity because of the width of the window\n\t    var maxWidth = this.calcPosition(0, 0, p.cols - p.x, 0).width;\n\n\t    // Calculate min/max constraints using our min & maxes\n\t    var mins = this.calcPosition(0, 0, p.minW, p.minH);\n\t    var maxes = this.calcPosition(0, 0, p.maxW, p.maxH);\n\t    var minConstraints = [mins.width, mins.height];\n\t    var maxConstraints = [Math.min(maxes.width, maxWidth), Math.min(maxes.height, Infinity)];\n\t    return React.createElement(\n\t      Resizable,\n\t      {\n\t        width: position.width,\n\t        height: position.height,\n\t        minConstraints: minConstraints,\n\t        maxConstraints: maxConstraints,\n\t        onResizeStop: this.onResizeHandler('onResizeStop'),\n\t        onResizeStart: this.onResizeHandler('onResizeStart'),\n\t        onResize: this.onResizeHandler('onResize')\n\t      },\n\t      child\n\t    );\n\t  },\n\n\t  /**\n\t   * Wrapper around drag events to provide more useful data.\n\t   * All drag events call the function with the given handler name,\n\t   * with the signature (index, x, y).\n\t   *\n\t   * @param  {String} handlerName Handler name to wrap.\n\t   * @return {Function}           Handler function.\n\t   */\n\t  onDragHandler: function onDragHandler(handlerName) {\n\t    var me = this;\n\t    return function (e, _ref) {\n\t      var element = _ref.element;\n\t      var position = _ref.position;\n\n\t      if (!me.props[handlerName]) return;\n\t      // Get new XY\n\n\t      var _me$calcXY = me.calcXY(position);\n\n\t      var x = _me$calcXY.x;\n\t      var y = _me$calcXY.y;\n\n\t      // Cap x at numCols\n\t      x = Math.min(x, me.props.cols - me.props.w);\n\n\t      me.props[handlerName](me.props.i, x, y, { e: e, element: element, position: position });\n\t    };\n\t  },\n\n\t  /**\n\t   * Wrapper around drag events to provide more useful data.\n\t   * All drag events call the function with the given handler name,\n\t   * with the signature (index, x, y).\n\t   *\n\t   * @param  {String} handlerName Handler name to wrap.\n\t   * @return {Function}           Handler function.\n\t   */\n\t  onResizeHandler: function onResizeHandler(handlerName) {\n\t    var me = this;\n\t    return function (e, _ref) {\n\t      var element = _ref.element;\n\t      var size = _ref.size;\n\n\t      if (!me.props[handlerName]) return;\n\n\t      // Get new XY\n\n\t      var _me$calcWH = me.calcWH(size);\n\n\t      var w = _me$calcWH.w;\n\t      var h = _me$calcWH.h;\n\n\t      // Cap w at numCols\n\t      w = Math.min(w, me.props.cols - me.props.x);\n\t      // Ensure w is at least 1\n\t      w = Math.max(w, 1);\n\n\t      // Min/max capping\n\t      w = Math.max(Math.min(w, me.props.maxW), me.props.minW);\n\t      h = Math.max(Math.min(h, me.props.maxH), me.props.minH);\n\n\t      me.setState({ resizing: handlerName === 'onResizeStop' ? null : size });\n\n\t      me.props[handlerName](me.props.i, w, h, { e: e, element: element, size: size });\n\t    };\n\t  },\n\n\t  render: function render() {\n\t    var p = this.props,\n\t        pos = this.calcPosition(p.x, p.y, p.w, p.h);\n\t    if (this.state.resizing) {\n\t      pos.width = this.state.resizing.width;\n\t      pos.height = this.state.resizing.height;\n\t    }\n\n\t    // Create the child element. We clone the existing element but modify its className and style.\n\t    var child = cloneWithProps(this.props.children, {\n\t      // Munge a classname. Use passed in classnames and resizing.\n\t      // React with merge the classNames.\n\t      className: ['react-grid-item', this.props.className, this.state.resizing ? 'resizing' : '', this.props.useCSSTransforms ? 'cssTransforms' : ''].join(' '),\n\t      // We can set the width and height on the child, but unfortunately we can't set the position.\n\t      style: this.createStyle(pos)\n\t    });\n\n\t    // Resizable support. This is usually on but the user can toggle it off.\n\t    if (this.props.isResizable) {\n\t      child = this.mixinResizable(child, pos);\n\t    }\n\n\t    // Draggable support. This is always on, except for with placeholders.\n\t    if (this.props.isDraggable) {\n\t      child = this.mixinDraggable(child, pos);\n\t    }\n\n\t    return child;\n\t  }\n\t});\n\n\tfunction constraintError(name, props) {\n\t  delete props.children;\n\t  throw new Error(name + ' overrides contraints on gridItem ' + props.i + '. Full props: ' + JSON.stringify(props));\n\t}\n\n\tmodule.exports = GridItem;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };\n\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\tvar React = __webpack_require__(1);\n\tvar utils = __webpack_require__(2);\n\tvar responsiveUtils = __webpack_require__(11);\n\tvar PureDeepRenderMixin = __webpack_require__(3);\n\tvar WidthListeningMixin = __webpack_require__(6);\n\tvar ReactGridLayout = __webpack_require__(5);\n\n\t/**\n\t * A wrapper around ReactGridLayout to support responsive breakpoints.\n\t */\n\tvar ResponsiveReactGridLayout = React.createClass({\n\t  displayName: 'ResponsiveReactGridLayout',\n\n\t  mixins: [PureDeepRenderMixin, WidthListeningMixin],\n\n\t  propTypes: {\n\t    //\n\t    // Basic props\n\t    //\n\n\t    // Optional, but if you are managing width yourself you may want to set the breakpoint\n\t    // yourself as well.\n\t    breakpoint: React.PropTypes.string,\n\n\t    // {name: pxVal}, e.g. {lg: 1200, md: 996, sm: 768, xs: 480}\n\t    breakpoints: React.PropTypes.object,\n\n\t    // # of cols. This is a breakpoint -> cols map\n\t    cols: React.PropTypes.object,\n\n\t    // layouts is an object mapping breakpoints to layouts.\n\t    // e.g. {lg: Layout, md: Layout, ...}\n\t    layouts: function layouts(props, propName, componentName) {\n\t      React.PropTypes.object.isRequired.apply(this, arguments);\n\n\t      var layouts = props.layouts;\n\t      Object.keys(layouts).map(function (k) {\n\t        utils.validateLayout(layouts[k], 'layouts.' + k);\n\t      });\n\t    },\n\n\t    //\n\t    // Callbacks\n\t    //\n\n\t    // Calls back with breakpoint and new # cols\n\t    onBreakpointChange: React.PropTypes.func,\n\n\t    // Callback so you can save the layout.\n\t    // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n\t    onLayoutChange: React.PropTypes.func\n\t  },\n\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      breakpoints: { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 },\n\t      cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 },\n\t      layouts: {},\n\t      onBreakpointChange: function onBreakpointChange() {},\n\t      onLayoutChange: function onLayoutChange() {}\n\t    };\n\t  },\n\n\t  getInitialState: function getInitialState() {\n\t    var breakpoint = this.props.breakpoint || responsiveUtils.getBreakpointFromWidth(this.props.breakpoints, this.props.initialWidth);\n\t    var cols = responsiveUtils.getColsFromBreakpoint(breakpoint, this.props.cols);\n\n\t    // Get the initial layout. This can tricky; we try to generate one however possible if one doesn't exist\n\t    // for this layout.\n\t    var initialLayout = responsiveUtils.findOrGenerateResponsiveLayout(this.props.layouts, this.props.breakpoints, breakpoint, breakpoint, cols, this.props.verticalCompact);\n\n\t    return {\n\t      layout: initialLayout,\n\t      // storage for layouts obsoleted by breakpoints\n\t      layouts: this.props.layouts || {},\n\t      breakpoint: breakpoint,\n\t      cols: cols,\n\t      width: this.props.initialWidth\n\t    };\n\t  },\n\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t    // This allows you to set the width manually if you like.\n\t    // Use manual width changes in combination with `listenToWindowResize: false`\n\t    if (nextProps.width) this.onWidthChange(nextProps.width);\n\n\t    // Allow parent to set breakpoint directly.\n\t    if (nextProps.breakpoint !== this.props.breakpoint) {\n\t      this.onWidthChange(this.state.width);\n\t    }\n\n\t    // Allow parent to set layouts directly.\n\t    if (nextProps.layouts && nextProps.layouts !== this.state.layouts) {\n\t      // Since we're setting an entirely new layout object, we must generate a new responsive layout\n\t      // if one does not exist.\n\t      var newLayout = responsiveUtils.findOrGenerateResponsiveLayout(nextProps.layouts, nextProps.breakpoints, this.state.breakpoint, this.state.breakpoint, this.state.cols, this.props.verticalLayout);\n\n\t      this.setState({\n\t        layouts: nextProps.layouts,\n\t        layout: newLayout\n\t      });\n\t    }\n\t  },\n\n\t  /**\n\t   * Bubble this up, add `layouts` object.\n\t   * @param  {Array} layout Layout from inner Grid.\n\t   */\n\t  onLayoutChange: function onLayoutChange(layout) {\n\t    this.state.layouts[this.state.breakpoint] = layout;\n\t    this.setState({ layout: layout, layouts: this.state.layouts });\n\t    this.props.onLayoutChange(layout, this.state.layouts);\n\t  },\n\n\t  /**\n\t   * When the width changes work through breakpoints and reset state with the new width & breakpoint.\n\t   * Width changes are necessary to figure out the widget widths.\n\t   */\n\t  onWidthChange: function onWidthChange(width) {\n\t    // Set new breakpoint\n\t    var newState = { width: width };\n\t    newState.breakpoint = this.props.breakpoint || responsiveUtils.getBreakpointFromWidth(this.props.breakpoints, newState.width);\n\t    newState.cols = responsiveUtils.getColsFromBreakpoint(newState.breakpoint, this.props.cols);\n\n\t    // Breakpoint change\n\t    if (newState.cols !== this.state.cols) {\n\n\t      // Store the current layout\n\t      newState.layouts = this.state.layouts;\n\t      newState.layouts[this.state.breakpoint] = JSON.parse(JSON.stringify(this.state.layout));\n\n\t      // Find or generate a new one.\n\t      newState.layout = responsiveUtils.findOrGenerateResponsiveLayout(newState.layouts, this.props.breakpoints, newState.breakpoint, this.state.breakpoint, newState.cols, this.props.verticalLayout);\n\n\t      // This adds missing items.\n\t      newState.layout = utils.synchronizeLayoutWithChildren(newState.layout, this.props.children, newState.cols, this.props.verticalCompact);\n\n\t      // Store this new layout as well.\n\t      newState.layouts[newState.breakpoint] = newState.layout;\n\n\t      this.props.onBreakpointChange(newState.breakpoint, newState.cols);\n\t    }\n\n\t    this.setState(newState);\n\t  },\n\n\t  render: function render() {\n\t    // Don't pass responsive props to RGL.\n\t    /*jshint unused:false*/\n\t    var _props = this.props;\n\t    var layouts = _props.layouts;\n\t    var onBreakpointChange = _props.onBreakpointChange;\n\t    var breakpoints = _props.breakpoints;\n\n\t    var props = _objectWithoutProperties(_props, ['layouts', 'onBreakpointChange', 'breakpoints']);\n\n\t    return React.createElement(\n\t      ReactGridLayout,\n\t      _extends({}, props, {\n\t        layout: this.state.layout,\n\t        cols: this.state.cols,\n\t        listenToWindowResize: false,\n\t        onLayoutChange: this.onLayoutChange,\n\t        width: this.state.width }),\n\t      this.props.children\n\t    );\n\t  }\n\t});\n\n\tmodule.exports = ResponsiveReactGridLayout;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar utils = __webpack_require__(2);\n\n\tvar responsiveUtils = module.exports = {\n\n\t  /**\n\t   * Given a width, find the highest breakpoint that matches is valid for it (width > breakpoint).\n\t   *\n\t   * @param  {Object} breakpoints Breakpoints object (e.g. {lg: 1200, md: 960, ...})\n\t   * @param  {Number} width Screen width.\n\t   * @return {String}       Highest breakpoint that is less than width.\n\t   */\n\t  getBreakpointFromWidth: function getBreakpointFromWidth(breakpoints, width) {\n\t    var sorted = responsiveUtils.sortBreakpoints(breakpoints);\n\t    var matching = sorted[0];\n\t    for (var i = 1, len = sorted.length; i < len; i++) {\n\t      var breakpointName = sorted[i];\n\t      if (width > breakpoints[breakpointName]) matching = breakpointName;\n\t    }\n\t    return matching;\n\t  },\n\n\t  /**\n\t   * Given a breakpoint, get the # of cols set for it.\n\t   * @param  {String} breakpoint Breakpoint name.\n\t   * @param  {Object} cols       Map of breakpoints to cols.\n\t   * @return {Number}            Number of cols.\n\t   */\n\t  getColsFromBreakpoint: function getColsFromBreakpoint(breakpoint, cols) {\n\t    if (!cols[breakpoint]) {\n\t      throw new Error('ResponsiveReactGridLayout: `cols` entry for breakpoint ' + breakpoint + ' is missing!');\n\t    }\n\t    return cols[breakpoint];\n\t  },\n\n\t  /**\n\t   * Given existing layouts and a new breakpoint, find or generate a new layout.\n\t   *\n\t   * This finds the layout above the new one and generates from it, if it exists.\n\t   *\n\t   * @param  {Array} layouts     Existing layouts.\n\t   * @param  {Array} breakpoints All breakpoints.\n\t   * @param  {String} breakpoint New breakpoint.\n\t   * @param  {String} breakpoint Last breakpoint (for fallback).\n\t   * @param  {Number} cols       Column count at new breakpoint.\n\t   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n\t   *   vertically.\n\t   * @return {Array}             New layout.\n\t   */\n\t  findOrGenerateResponsiveLayout: function findOrGenerateResponsiveLayout(layouts, breakpoints, breakpoint, lastBreakpoint, cols, verticalCompact) {\n\t    // If it already exists, just return it.\n\t    if (layouts[breakpoint]) {\n\t      return layouts[breakpoint];\n\t    } // Find or generate the next layout\n\t    var layout = layouts[lastBreakpoint];\n\t    var breakpointsSorted = responsiveUtils.sortBreakpoints(breakpoints);\n\t    var breakpointsAbove = breakpointsSorted.slice(breakpointsSorted.indexOf(breakpoint));\n\t    for (var i = 0, len = breakpointsAbove.length; i < len; i++) {\n\t      var b = breakpointsAbove[i];\n\t      if (layouts[b]) {\n\t        layout = layouts[b];\n\t        break;\n\t      }\n\t    }\n\t    layout = JSON.parse(JSON.stringify(layout || [])); // clone layout so we don't modify existing items\n\t    return utils.compact(utils.correctBounds(layout, { cols: cols }), verticalCompact);\n\t  },\n\n\t  /**\n\t   * Given breakpoints, return an array of breakpoints sorted by width. This is usually\n\t   * e.g. ['xxs', 'xs', 'sm', ...]\n\t   *\n\t   * @param  {Object} breakpoints Key/value pair of breakpoint names to widths.\n\t   * @return {Array}              Sorted breakpoints.\n\t   */\n\t  sortBreakpoints: function sortBreakpoints(breakpoints) {\n\t    var keys = Object.keys(breakpoints);\n\t    return keys.sort(function (a, b) {\n\t      return breakpoints[a] - breakpoints[b];\n\t    });\n\t  }\n\t};\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tmodule.exports = function () {\n\t  throw new Error('Don\\'t instantiate Resizable directly! Use require(\\'react-resizable\\').Resizable');\n\t};\n\n\tmodule.exports.Resizable = __webpack_require__(8);\n\tmodule.exports.ResizableBox = __webpack_require__(19);\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar pSlice = Array.prototype.slice;\n\tvar objectKeys = __webpack_require__(15);\n\tvar isArguments = __webpack_require__(14);\n\n\tvar deepEqual = module.exports = function (actual, expected, opts) {\n\t  if (!opts) opts = {};\n\t  // 7.1. All identical values are equivalent, as determined by ===.\n\t  if (actual === expected) {\n\t    return true;\n\n\t  } else if (actual instanceof Date && expected instanceof Date) {\n\t    return actual.getTime() === expected.getTime();\n\n\t  // 7.3. Other pairs that do not both pass typeof value == 'object',\n\t  // equivalence is determined by ==.\n\t  } else if (typeof actual != 'object' && typeof expected != 'object') {\n\t    return opts.strict ? actual === expected : actual == expected;\n\n\t  // 7.4. For all other Object pairs, including Array objects, equivalence is\n\t  // determined by having the same number of owned properties (as verified\n\t  // with Object.prototype.hasOwnProperty.call), the same set of keys\n\t  // (although not necessarily the same order), equivalent values for every\n\t  // corresponding key, and an identical 'prototype' property. Note: this\n\t  // accounts for both named and indexed properties on Arrays.\n\t  } else {\n\t    return objEquiv(actual, expected, opts);\n\t  }\n\t}\n\n\tfunction isUndefinedOrNull(value) {\n\t  return value === null || value === undefined;\n\t}\n\n\tfunction isBuffer (x) {\n\t  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n\t  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n\t    return false;\n\t  }\n\t  if (x.length > 0 && typeof x[0] !== 'number') return false;\n\t  return true;\n\t}\n\n\tfunction objEquiv(a, b, opts) {\n\t  var i, key;\n\t  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n\t    return false;\n\t  // an identical 'prototype' property.\n\t  if (a.prototype !== b.prototype) return false;\n\t  //~~~I've managed to break Object.keys through screwy arguments passing.\n\t  //   Converting to array solves the problem.\n\t  if (isArguments(a)) {\n\t    if (!isArguments(b)) {\n\t      return false;\n\t    }\n\t    a = pSlice.call(a);\n\t    b = pSlice.call(b);\n\t    return deepEqual(a, b, opts);\n\t  }\n\t  if (isBuffer(a)) {\n\t    if (!isBuffer(b)) {\n\t      return false;\n\t    }\n\t    if (a.length !== b.length) return false;\n\t    for (i = 0; i < a.length; i++) {\n\t      if (a[i] !== b[i]) return false;\n\t    }\n\t    return true;\n\t  }\n\t  try {\n\t    var ka = objectKeys(a),\n\t        kb = objectKeys(b);\n\t  } catch (e) {//happens when one is a string literal and the other isn't\n\t    return false;\n\t  }\n\t  // having the same number of owned properties (keys incorporates\n\t  // hasOwnProperty)\n\t  if (ka.length != kb.length)\n\t    return false;\n\t  //the same set of keys (although not necessarily the same order),\n\t  ka.sort();\n\t  kb.sort();\n\t  //~~~cheap key test\n\t  for (i = ka.length - 1; i >= 0; i--) {\n\t    if (ka[i] != kb[i])\n\t      return false;\n\t  }\n\t  //equivalent values for every corresponding key, and\n\t  //~~~possibly expensive deep test\n\t  for (i = ka.length - 1; i >= 0; i--) {\n\t    key = ka[i];\n\t    if (!deepEqual(a[key], b[key], opts)) return false;\n\t  }\n\t  return typeof a === typeof b;\n\t}\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar supportsArgumentsClass = (function(){\n\t  return Object.prototype.toString.call(arguments)\n\t})() == '[object Arguments]';\n\n\texports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\n\texports.supported = supported;\n\tfunction supported(object) {\n\t  return Object.prototype.toString.call(object) == '[object Arguments]';\n\t};\n\n\texports.unsupported = unsupported;\n\tfunction unsupported(object){\n\t  return object &&\n\t    typeof object == 'object' &&\n\t    typeof object.length == 'number' &&\n\t    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n\t    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n\t    false;\n\t};\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = typeof Object.keys === 'function'\n\t  ? Object.keys : shim;\n\n\texports.shim = shim;\n\tfunction shim (obj) {\n\t  var keys = [];\n\t  for (var key in obj) keys.push(key);\n\t  return keys;\n\t}\n\n\n/***/ },\n/* 16 */\n4,\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\r\n\tvar React    = __webpack_require__(1)\r\n\t  , hasOwn   = Object.prototype.hasOwnProperty\r\n\t  , version  = React.version.split('.').map(parseFloat)\r\n\t  , RESERVED = {\r\n\t      className:  resolve(joinClasses),\r\n\t      children:   function(){},\r\n\t      key:        function(){},\r\n\t      ref:        function(){},\r\n\t      style:      resolve(extend)\r\n\t    };\r\n\r\n\tmodule.exports = function cloneWithProps(child, props) {\r\n\t  var newProps = mergeProps(props, child.props);\r\n\r\n\t  if (!hasOwn.call(newProps, 'children') && hasOwn.call(child.props, 'children'))\r\n\t    newProps.children = child.props.children;\r\n\r\n\t  // < 0.11\r\n\t  if (version[0] === 0 && version[1] < 11)\r\n\t    return child.constructor.ConvenienceConstructor(newProps);\r\n\t  \r\n\t  // 0.11\r\n\t  if (version[0] === 0 && version[1] === 11)\r\n\t    return child.constructor(newProps);\r\n\r\n\t  // 0.12\r\n\t  else if (version[0] === 0 && version[1] === 12){\r\n\t    MockLegacyFactory.isReactLegacyFactory = true\r\n\t    MockLegacyFactory.type = child.type\r\n\t    return React.createElement(MockLegacyFactory, newProps);\r\n\t  }\r\n\r\n\t  // 0.13+\r\n\t  return React.createElement(child.type, newProps);\r\n\r\n\t  function MockLegacyFactory(){}\r\n\t}\r\n\r\n\tfunction mergeProps(currentProps, childProps) {\r\n\t  var newProps = extend(currentProps), key\r\n\r\n\t  for (key in childProps) {\r\n\t    if (hasOwn.call(RESERVED, key) )\r\n\t      RESERVED[key](newProps, childProps[key], key)\r\n\r\n\t    else if ( !hasOwn.call(newProps, key) )\r\n\t      newProps[key] = childProps[key];\r\n\t  }\r\n\t  return newProps\r\n\t}\r\n\r\n\tfunction resolve(fn){\r\n\t  return function(src, value, key){\r\n\t    if( !hasOwn.call(src, key)) src[key] = value\r\n\t    else src[key] = fn(src[key], value)\r\n\t  }\r\n\t}\r\n\r\n\tfunction joinClasses(a, b){\r\n\t  if ( !a ) return b || ''\r\n\t  return a + (b ? ' ' + b : '')\r\n\t}\r\n\r\n\tfunction extend() {\r\n\t  var target = {};\r\n\t  for (var i = 0; i < arguments.length; i++) \r\n\t    for (var key in arguments[i]) if (hasOwn.call(arguments[i], key)) \r\n\t      target[key] = arguments[i][key]   \r\n\t  return target\r\n\t}\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2015, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule shallowEqual\n\t */\n\n\t'use strict';\n\n\t/**\n\t * Performs equality by iterating through keys on an object and returning\n\t * false when any key has values which are not strictly equal between\n\t * objA and objB. Returns true when the values of all keys are strictly equal.\n\t *\n\t * @return {boolean}\n\t */\n\tfunction shallowEqual(objA, objB) {\n\t  if (objA === objB) {\n\t    return true;\n\t  }\n\t  var key;\n\t  // Test for A's keys different from B.\n\t  for (key in objA) {\n\t    if (objA.hasOwnProperty(key) &&\n\t        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {\n\t      return false;\n\t    }\n\t  }\n\t  // Test for B's keys missing from A.\n\t  for (key in objB) {\n\t    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n\t      return false;\n\t    }\n\t  }\n\t  return true;\n\t}\n\n\tmodule.exports = shallowEqual;\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar _objectWithoutProperties = function _objectWithoutProperties(obj, keys) {\n\t  var target = {};for (var i in obj) {\n\t    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];\n\t  }return target;\n\t};\n\n\tvar _slicedToArray = function _slicedToArray(arr, i) {\n\t  if (Array.isArray(arr)) {\n\t    return arr;\n\t  } else if (Symbol.iterator in Object(arr)) {\n\t    var _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n\t      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n\t        _arr.push(_s.value);if (i && _arr.length === i) break;\n\t      }\n\t    } catch (err) {\n\t      _d = true;_e = err;\n\t    } finally {\n\t      try {\n\t        if (!_n && _i['return']) _i['return']();\n\t      } finally {\n\t        if (_d) throw _e;\n\t      }\n\t    }return _arr;\n\t  } else {\n\t    throw new TypeError('Invalid attempt to destructure non-iterable instance');\n\t  }\n\t};\n\n\tvar _extends = Object.assign || function (target) {\n\t  for (var i = 1; i < arguments.length; i++) {\n\t    var source = arguments[i];for (var key in source) {\n\t      if (Object.prototype.hasOwnProperty.call(source, key)) {\n\t        target[key] = source[key];\n\t      }\n\t    }\n\t  }return target;\n\t};\n\n\tvar React = __webpack_require__(1);\n\tvar Resizable = __webpack_require__(8);\n\tvar PureRenderMixin = __webpack_require__(7);\n\n\t// An example use of Resizable.\n\tvar ResizableBox = module.exports = React.createClass({\n\t  displayName: 'ResizableBox',\n\t  mixins: [PureRenderMixin],\n\n\t  propTypes: {\n\t    lockAspectRatio: React.PropTypes.bool\n\t  },\n\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      lockAspectRatio: false,\n\t      handleSize: [20, 20]\n\t    };\n\t  },\n\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      width: this.props.width,\n\t      height: this.props.height,\n\t      aspectRatio: this.props.width / this.props.height\n\t    };\n\t  },\n\n\t  onResize: function onResize(event, _ref) {\n\t    var element = _ref.element;\n\t    var size = _ref.size;\n\t    var width = size.width;\n\t    var height = size.height;\n\n\t    var widthChanged = width !== this.state.width,\n\t        heightChanged = height !== this.state.height;\n\t    if (!widthChanged && !heightChanged) {\n\t      return;\n\t    }if (this.props.lockAspectRatio) {\n\t      var _preserveAspectRatio = this.preserveAspectRatio(width, height);\n\n\t      var _preserveAspectRatio2 = _slicedToArray(_preserveAspectRatio, 2);\n\n\t      width = _preserveAspectRatio2[0];\n\t      height = _preserveAspectRatio2[1];\n\t    }\n\n\t    this.setState({ width: width, height: height });\n\t  },\n\n\t  // If you do this, be careful of constraints\n\t  preserveAspectRatio: function preserveAspectRatio(width, height) {\n\t    var min = this.props.minConstraints;\n\t    var max = this.props.maxConstraints;\n\n\t    height = width / this.state.aspectRatio;\n\t    width = height * this.state.aspectRatio;\n\n\t    if (min) {\n\t      width = Math.max(min[0], width);\n\t      height = Math.max(min[1], height);\n\t    }\n\t    if (max) {\n\t      width = Math.min(max[0], width);\n\t      height = Math.min(max[1], height);\n\t    }\n\t    return [width, height];\n\t  },\n\n\t  render: function render() {\n\t    // Basic wrapper around a Resizable instance.\n\t    // If you use Resizable directly, you are responsible for updating the component\n\t    // with a new width and height.\n\t    var _props = this.props;\n\t    var handleSize = _props.handleSize;\n\t    var minConstraints = _props.minConstraints;\n\t    var maxConstraints = _props.maxConstraints;\n\n\t    var props = _objectWithoutProperties(_props, ['handleSize', 'minConstraints', 'maxConstraints']);\n\n\t    return React.createElement(Resizable, {\n\t      minConstraints: minConstraints,\n\t      maxConstraints: maxConstraints,\n\t      handleSize: handleSize,\n\t      width: this.state.width,\n\t      height: this.state.height,\n\t      onResize: this.onResize,\n\t      draggableOpts: this.props.draggableOpts\n\t    }, React.createElement('div', _extends({ style: { width: this.state.width + 'px', height: this.state.height + 'px' } }, props), this.props.children));\n\t  }\n\t});\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar assign = __webpack_require__(4);\n\tvar React = __webpack_require__(1);\n\n\tmodule.exports = function cloneElement(element, props) {\n\t  if (props.style && element.props.style) {\n\t    props.style = assign({}, element.props.style, props.style);\n\t  }\n\t  if (props.className && element.props.className) {\n\t    props.className = element.props.className + ' ' + props.className;\n\t  }\n\t  return React.cloneElement(element, props);\n\t};\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(22);\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar React = __webpack_require__(1);\n\tvar emptyFunction = function(){};\n\tvar assign = __webpack_require__(4);\n\tvar classNames = __webpack_require__(23);\n\n\t//\n\t// Helpers. See Element definition below this section.\n\t//\n\n\tfunction createUIEvent(draggable) {\n\t  // State changes are often (but not always!) async. We want the latest value.\n\t  var state = draggable._pendingState || draggable.state;\n\t  return {\n\t    node: draggable.getDOMNode(),\n\t    position: {\n\t      top: state.clientY,\n\t      left: state.clientX\n\t    }\n\t  };\n\t}\n\n\tfunction canDragY(draggable) {\n\t  return draggable.props.axis === 'both' ||\n\t      draggable.props.axis === 'y';\n\t}\n\n\tfunction canDragX(draggable) {\n\t  return draggable.props.axis === 'both' ||\n\t      draggable.props.axis === 'x';\n\t}\n\n\tfunction isFunction(func) {\n\t  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';\n\t}\n\n\t// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc\n\tfunction findInArray(array, callback) {\n\t  for (var i = 0, length = array.length; i < length; i++) {\n\t    if (callback.apply(callback, [array[i], i, array])) return array[i];\n\t  }\n\t}\n\n\tfunction matchesSelector(el, selector) {\n\t  var method = findInArray([\n\t    'matches',\n\t    'webkitMatchesSelector',\n\t    'mozMatchesSelector',\n\t    'msMatchesSelector',\n\t    'oMatchesSelector'\n\t  ], function(method){\n\t    return isFunction(el[method]);\n\t  });\n\n\t  return el[method].call(el, selector);\n\t}\n\n\t/**\n\t * simple abstraction for dragging events names\n\t * */\n\tvar eventsFor = {\n\t  touch: {\n\t    start: 'touchstart',\n\t    move: 'touchmove',\n\t    end: 'touchend'\n\t  },\n\t  mouse: {\n\t    start: 'mousedown',\n\t    move: 'mousemove',\n\t    end: 'mouseup'\n\t  }\n\t};\n\n\t// Default to mouse events\n\tvar dragEventFor = eventsFor['mouse'];\n\n\t/**\n\t * get {clientX, clientY} positions of control\n\t * */\n\tfunction getControlPosition(e) {\n\t  var position = (e.touches && e.touches[0]) || e;\n\t  return {\n\t    clientX: position.clientX,\n\t    clientY: position.clientY\n\t  };\n\t}\n\n\tfunction addEvent(el, event, handler) {\n\t  if (!el) { return; }\n\t  if (el.attachEvent) {\n\t    el.attachEvent('on' + event, handler);\n\t  } else if (el.addEventListener) {\n\t    el.addEventListener(event, handler, true);\n\t  } else {\n\t    el['on' + event] = handler;\n\t  }\n\t}\n\n\tfunction removeEvent(el, event, handler) {\n\t  if (!el) { return; }\n\t  if (el.detachEvent) {\n\t    el.detachEvent('on' + event, handler);\n\t  } else if (el.removeEventListener) {\n\t    el.removeEventListener(event, handler, true);\n\t  } else {\n\t    el['on' + event] = null;\n\t  }\n\t}\n\n\tfunction outerHeight(node) {\n\t  // This is deliberately excluding margin for our calculations, since we are using\n\t  // offsetTop which is including margin. See getBoundPosition\n\t  var height = node.clientHeight;\n\t  var computedStyle = window.getComputedStyle(node);\n\t  height += int(computedStyle.borderTopWidth);\n\t  height += int(computedStyle.borderBottomWidth);\n\t  return height;\n\t}\n\n\tfunction outerWidth(node) {\n\t  // This is deliberately excluding margin for our calculations, since we are using\n\t  // offsetLeft which is including margin. See getBoundPosition\n\t  var width = node.clientWidth;\n\t  var computedStyle = window.getComputedStyle(node);\n\t  width += int(computedStyle.borderLeftWidth);\n\t  width += int(computedStyle.borderRightWidth);\n\t  return width;\n\t}\n\tfunction innerHeight(node) {\n\t  var height = node.clientHeight;\n\t  var computedStyle = window.getComputedStyle(node);\n\t  height -= int(computedStyle.paddingTop);\n\t  height -= int(computedStyle.paddingBottom);\n\t  return height;\n\t}\n\n\tfunction innerWidth(node) {\n\t  var width = node.clientWidth;\n\t  var computedStyle = window.getComputedStyle(node);\n\t  width -= int(computedStyle.paddingLeft);\n\t  width -= int(computedStyle.paddingRight);\n\t  return width;\n\t}\n\n\tfunction isNum(num) {\n\t  return typeof num === 'number' && !isNaN(num);\n\t}\n\n\tfunction int(a) {\n\t  return parseInt(a, 10);\n\t}\n\n\tfunction getBoundPosition(draggable, clientX, clientY) {\n\t  var bounds = JSON.parse(JSON.stringify(draggable.props.bounds));\n\t  var node = draggable.getDOMNode();\n\t  var parent = node.parentNode;\n\n\t  if (bounds === 'parent') {\n\t    var nodeStyle = window.getComputedStyle(node);\n\t    var parentStyle = window.getComputedStyle(parent);\n\t    // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.\n\t    bounds = {\n\t      left: -node.offsetLeft + int(parentStyle.paddingLeft) +\n\t            int(nodeStyle.borderLeftWidth) + int(nodeStyle.marginLeft),\n\t      top: -node.offsetTop + int(parentStyle.paddingTop) +\n\t            int(nodeStyle.borderTopWidth) + int(nodeStyle.marginTop),\n\t      right: innerWidth(parent) - outerWidth(node) - node.offsetLeft,\n\t      bottom: innerHeight(parent) - outerHeight(node) - node.offsetTop\n\t    };\n\t  }\n\n\t  // Keep x and y below right and bottom limits...\n\t  if (isNum(bounds.right)) clientX = Math.min(clientX, bounds.right);\n\t  if (isNum(bounds.bottom)) clientY = Math.min(clientY, bounds.bottom);\n\n\t  // But above left and top limits.\n\t  if (isNum(bounds.left)) clientX = Math.max(clientX, bounds.left);\n\t  if (isNum(bounds.top)) clientY = Math.max(clientY, bounds.top);\n\n\t  return [clientX, clientY];\n\t}\n\n\tfunction snapToGrid(grid, pendingX, pendingY) {\n\t  var x = Math.round(pendingX / grid[0]) * grid[0];\n\t  var y = Math.round(pendingY / grid[1]) * grid[1];\n\t  return [x, y];\n\t}\n\n\t// Useful for preventing blue highlights all over everything when dragging.\n\tvar userSelectStyle = ';user-select: none;-webkit-user-select:none;-moz-user-select:none;' +\n\t  '-o-user-select:none;-ms-user-select:none;';\n\n\tfunction addUserSelectStyles(draggable) {\n\t  if (!draggable.props.enableUserSelectHack) return;\n\t  var style = document.body.getAttribute('style') || '';\n\t  document.body.setAttribute('style', style + userSelectStyle);\n\t}\n\n\tfunction removeUserSelectStyles(draggable) {\n\t  if (!draggable.props.enableUserSelectHack) return;\n\t  var style = document.body.getAttribute('style') || '';\n\t  document.body.setAttribute('style', style.replace(userSelectStyle, ''));\n\t}\n\n\tfunction createCSSTransform(style) {\n\t  // Replace unitless items with px\n\t  var x = style.x + 'px';\n\t  var y = style.y + 'px';\n\t  return {\n\t    transform: 'translate(' + x + ',' + y + ')',\n\t    WebkitTransform: 'translate(' + x + ',' + y + ')',\n\t    OTransform: 'translate(' + x + ',' + y + ')',\n\t    msTransform: 'translate(' + x + ',' + y + ')',\n\t    MozTransform: 'translate(' + x + ',' + y + ')'\n\t  };\n\t}\n\n\n\t//\n\t// End Helpers.\n\t//\n\n\t//\n\t// Define <Draggable>\n\t//\n\n\tmodule.exports = React.createClass({\n\t  displayName: 'Draggable',\n\n\t  propTypes: {\n\t    /**\n\t     * `axis` determines which axis the draggable can move.\n\t     *\n\t     * 'both' allows movement horizontally and vertically.\n\t     * 'x' limits movement to horizontal axis.\n\t     * 'y' limits movement to vertical axis.\n\t     *\n\t     * Defaults to 'both'.\n\t     */\n\t    axis: React.PropTypes.oneOf(['both', 'x', 'y']),\n\n\t    /**\n\t     * `bounds` determines the range of movement available to the element.\n\t     * Available values are:\n\t     *\n\t     * 'parent' restricts movement within the Draggable's parent node.\n\t     *\n\t     * Alternatively, pass an object with the following properties, all of which are optional:\n\t     *\n\t     * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}\n\t     *\n\t     * All values are in px.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```jsx\n\t     *   var App = React.createClass({\n\t     *       render: function () {\n\t     *         return (\n\t     *            <Draggable bounds={{right: 300, bottom: 300}}>\n\t     *              <div>Content</div>\n\t     *           </Draggable>\n\t     *         );\n\t     *       }\n\t     *   });\n\t     * ```\n\t     */\n\t    bounds: React.PropTypes.oneOfType([\n\t      React.PropTypes.shape({\n\t        left: React.PropTypes.Number,\n\t        right: React.PropTypes.Number,\n\t        top: React.PropTypes.Number,\n\t        bottom: React.PropTypes.Number\n\t      }),\n\t      React.PropTypes.oneOf(['parent', false])\n\t    ]),\n\n\t    /**\n\t     * By default, we add 'user-select:none' attributes to the document body\n\t     * to prevent ugly text selection during drag. If this is causing problems\n\t     * for your app, set this to `false`.\n\t     */\n\t    enableUserSelectHack: React.PropTypes.bool,\n\n\t    /**\n\t     * `handle` specifies a selector to be used as the handle that initiates drag.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```jsx\n\t     *   var App = React.createClass({\n\t     *       render: function () {\n\t     *         return (\n\t     *            <Draggable handle=\".handle\">\n\t     *              <div>\n\t     *                  <div className=\"handle\">Click me to drag</div>\n\t     *                  <div>This is some other content</div>\n\t     *              </div>\n\t     *           </Draggable>\n\t     *         );\n\t     *       }\n\t     *   });\n\t     * ```\n\t     */\n\t    handle: React.PropTypes.string,\n\n\t    /**\n\t     * `cancel` specifies a selector to be used to prevent drag initialization.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```jsx\n\t     *   var App = React.createClass({\n\t     *       render: function () {\n\t     *           return(\n\t     *               <Draggable cancel=\".cancel\">\n\t     *                   <div>\n\t     *                     <div className=\"cancel\">You can't drag from here</div>\n\t     *            <div>Dragging here works fine</div>\n\t     *                   </div>\n\t     *               </Draggable>\n\t     *           );\n\t     *       }\n\t     *   });\n\t     * ```\n\t     */\n\t    cancel: React.PropTypes.string,\n\n\t    /**\n\t     * `grid` specifies the x and y that dragging should snap to.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```jsx\n\t     *   var App = React.createClass({\n\t     *       render: function () {\n\t     *           return (\n\t     *               <Draggable grid={[25, 25]}>\n\t     *                   <div>I snap to a 25 x 25 grid</div>\n\t     *               </Draggable>\n\t     *           );\n\t     *       }\n\t     *   });\n\t     * ```\n\t     */\n\t    grid: React.PropTypes.arrayOf(React.PropTypes.number),\n\n\t    /**\n\t     * `start` specifies the x and y that the dragged item should start at\n\t     *\n\t     * Example:\n\t     *\n\t     * ```jsx\n\t     *      var App = React.createClass({\n\t     *          render: function () {\n\t     *              return (\n\t     *                  <Draggable start={{x: 25, y: 25}}>\n\t     *                      <div>I start with transformX: 25px and transformY: 25px;</div>\n\t     *                  </Draggable>\n\t     *              );\n\t     *          }\n\t     *      });\n\t     * ```\n\t     */\n\t    start: React.PropTypes.shape({\n\t      x: React.PropTypes.number,\n\t      y: React.PropTypes.number\n\t    }),\n\n\t    /**\n\t     * `moveOnStartChange`, if true (default false) will move the element if the `start`\n\t     * property changes.\n\t     */\n\t    moveOnStartChange: React.PropTypes.bool,\n\n\n\t    /**\n\t     * `zIndex` specifies the zIndex to use while dragging.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```jsx\n\t     *   var App = React.createClass({\n\t     *       render: function () {\n\t     *           return (\n\t     *               <Draggable zIndex={100}>\n\t     *                   <div>I have a zIndex</div>\n\t     *               </Draggable>\n\t     *           );\n\t     *       }\n\t     *   });\n\t     * ```\n\t     */\n\t    zIndex: React.PropTypes.number,\n\n\t    /**\n\t     * Called when dragging starts.\n\t     * If this function returns the boolean false, dragging will be canceled.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```js\n\t     *  function (event, ui) {}\n\t     * ```\n\t     *\n\t     * `event` is the Event that was triggered.\n\t     * `ui` is an object:\n\t     *\n\t     * ```js\n\t     *  {\n\t     *    position: {top: 0, left: 0}\n\t     *  }\n\t     * ```\n\t     */\n\t    onStart: React.PropTypes.func,\n\n\t    /**\n\t     * Called while dragging.\n\t     * If this function returns the boolean false, dragging will be canceled.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```js\n\t     *  function (event, ui) {}\n\t     * ```\n\t     *\n\t     * `event` is the Event that was triggered.\n\t     * `ui` is an object:\n\t     *\n\t     * ```js\n\t     *  {\n\t     *    position: {top: 0, left: 0}\n\t     *  }\n\t     * ```\n\t     */\n\t    onDrag: React.PropTypes.func,\n\n\t    /**\n\t     * Called when dragging stops.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```js\n\t     *  function (event, ui) {}\n\t     * ```\n\t     *\n\t     * `event` is the Event that was triggered.\n\t     * `ui` is an object:\n\t     *\n\t     * ```js\n\t     *  {\n\t     *    position: {top: 0, left: 0}\n\t     *  }\n\t     * ```\n\t     */\n\t    onStop: React.PropTypes.func,\n\n\t    /**\n\t     * A workaround option which can be passed if onMouseDown needs to be accessed,\n\t     * since it'll always be blocked (due to that there's internal use of onMouseDown)\n\t     */\n\t    onMouseDown: React.PropTypes.func,\n\t  },\n\n\t  componentWillReceiveProps: function(newProps) {\n\t    // React to changes in the 'start' param.\n\t    if (newProps.moveOnStartChange && newProps.start) {\n\t      this.setState(this.getInitialState(newProps));\n\t    }\n\t  },\n\n\t  componentWillUnmount: function() {\n\t    // Remove any leftover event handlers\n\t    removeEvent(document, dragEventFor['move'], this.handleDrag);\n\t    removeEvent(document, dragEventFor['end'], this.handleDragEnd);\n\t    removeUserSelectStyles(this);\n\t  },\n\n\t  getDefaultProps: function () {\n\t    return {\n\t      axis: 'both',\n\t      bounds: false,\n\t      handle: null,\n\t      cancel: null,\n\t      grid: null,\n\t      moveOnStartChange: false,\n\t      start: {x: 0, y: 0},\n\t      zIndex: NaN,\n\t      enableUserSelectHack: true,\n\t      onStart: emptyFunction,\n\t      onDrag: emptyFunction,\n\t      onStop: emptyFunction,\n\t      onMouseDown: emptyFunction\n\t    };\n\t  },\n\n\t  getInitialState: function (props) {\n\t    // Handle call from CWRP\n\t    props = props || this.props;\n\t    return {\n\t      // Whether or not we are currently dragging.\n\t      dragging: false,\n\n\t      // Offset between start top/left and mouse top/left while dragging.\n\t      offsetX: 0, offsetY: 0,\n\n\t      // Current transform x and y.\n\t      clientX: props.start.x, clientY: props.start.y\n\t    };\n\t  },\n\n\t  handleDragStart: function (e) {\n\t    // Make it possible to attach event handlers on top of this one\n\t    this.props.onMouseDown(e);\n\n\t    // Short circuit if handle or cancel prop was provided and selector doesn't match\n\t    if ((this.props.handle && !matchesSelector(e.target, this.props.handle)) ||\n\t      (this.props.cancel && matchesSelector(e.target, this.props.cancel))) {\n\t      return;\n\t    }\n\n\t    // Call event handler. If it returns explicit false, cancel.\n\t    var shouldStart = this.props.onStart(e, createUIEvent(this));\n\t    if (shouldStart === false) return;\n\n\t    var dragPoint = getControlPosition(e);\n\n\t    // Add a style to the body to disable user-select. This prevents text from\n\t    // being selected all over the page.\n\t    addUserSelectStyles(this);\n\n\t    // Initiate dragging. Set the current x and y as offsets\n\t    // so we know how much we've moved during the drag. This allows us\n\t    // to drag elements around even if they have been moved, without issue.\n\t    this.setState({\n\t      dragging: true,\n\t      offsetX: dragPoint.clientX - this.state.clientX,\n\t      offsetY: dragPoint.clientY - this.state.clientY\n\t    });\n\n\n\t    // Add event handlers\n\t    addEvent(document, dragEventFor['move'], this.handleDrag);\n\t    addEvent(document, dragEventFor['end'], this.handleDragEnd);\n\t  },\n\n\t  handleDragEnd: function (e) {\n\t    // Short circuit if not currently dragging\n\t    if (!this.state.dragging) {\n\t      return;\n\t    }\n\n\t    removeUserSelectStyles(this);\n\n\t    // Turn off dragging\n\t    this.setState({\n\t      dragging: false\n\t    });\n\n\t    // Call event handler\n\t    this.props.onStop(e, createUIEvent(this));\n\n\t    // Remove event handlers\n\t    removeEvent(document, dragEventFor['move'], this.handleDrag);\n\t    removeEvent(document, dragEventFor['end'], this.handleDragEnd);\n\t  },\n\n\t  handleDrag: function (e) {\n\t    var dragPoint = getControlPosition(e);\n\n\t    // Calculate X and Y\n\t    var clientX = dragPoint.clientX - this.state.offsetX;\n\t    var clientY = dragPoint.clientY - this.state.offsetY;\n\n\t    // Snap to grid if prop has been provided\n\t    if (Array.isArray(this.props.grid)) {\n\t      var coords = snapToGrid(this.props.grid, clientX, clientY);\n\t      clientX = coords[0], clientY = coords[1];\n\t    }\n\n\t    if (this.props.bounds) {\n\t      var pos = getBoundPosition(this, clientX, clientY);\n\t      clientX = pos[0], clientY = pos[1];\n\t    }\n\n\t    // Call event handler. If it returns explicit false, cancel.\n\t    var shouldUpdate = this.props.onDrag(e, createUIEvent(this));\n\t    if (shouldUpdate === false) return this.handleDragEnd();\n\n\t    // Update transform\n\t    this.setState({\n\t      clientX: clientX,\n\t      clientY: clientY\n\t    });\n\t  },\n\n\t  onMouseDown: function(ev) {\n\t    // Prevent 'ghost click' which happens 300ms after touchstart if the event isn't cancelled.\n\t    // We don't cancel the event on touchstart because of #37; we might want to make a scrollable item draggable.\n\t    // More on ghost clicks: http://ariatemplates.com/blog/2014/05/ghost-clicks-in-mobile-browsers/\n\t    if (dragEventFor == eventsFor['touch']) {\n\t      return ev.preventDefault();\n\t    }\n\n\t    return this.handleDragStart.apply(this, arguments);\n\t  },\n\n\t  onTouchStart: function(ev) {\n\t    // We're on a touch device now, so change the event handlers\n\t    dragEventFor = eventsFor['touch'];\n\n\t    return this.handleDragStart.apply(this, arguments);\n\t  },\n\n\t  // Intended for use by a parent component. Resets internal state on this component. Useful for\n\t  // <Resizable> and other components in case this element is manually resized and start/moveOnStartChange\n\t  // don't work for you.\n\t  resetState: function() {\n\t    this.setState({\n\t      offsetX: 0, offsetY: 0, clientX: 0, clientY: 0\n\t    });\n\t  },\n\n\t  render: function () {\n\t    // Create style object. We extend from existing styles so we don't\n\t    // remove anything already set (like background, color, etc).\n\t    var childStyle = this.props.children.props.style || {};\n\n\t    // Add a CSS transform to move the element around. This allows us to move the element around\n\t    // without worrying about whether or not it is relatively or absolutely positioned.\n\t    // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>\n\t    // has a clean slate.\n\t    var transform = createCSSTransform({\n\t      // Set left if horizontal drag is enabled\n\t      x: canDragX(this) ?\n\t        this.state.clientX :\n\t        0,\n\n\t      // Set top if vertical drag is enabled\n\t      y: canDragY(this) ?\n\t        this.state.clientY :\n\t        0\n\t    });\n\n\t    // Workaround IE pointer events; see #51\n\t    // https://github.com/mzabriskie/react-draggable/issues/51#issuecomment-103488278\n\t    var touchHacks = {\n\t      touchAction: 'none'\n\t    };\n\n\t    var style = assign({}, childStyle, transform, touchHacks);\n\n\t    // Set zIndex if currently dragging and prop has been provided\n\t    if (this.state.dragging && !isNaN(this.props.zIndex)) {\n\t      style.zIndex = this.props.zIndex;\n\t    }\n\n\t    var className = classNames((this.props.children.props.className || ''), 'react-draggable', {\n\t      'react-draggable-dragging': this.state.dragging,\n\t      'react-draggable-dragged': this.state.dragged\n\t    });\n\n\t    // Reuse the child provided\n\t    // This makes it flexible to use whatever element is wanted (div, ul, etc)\n\t    return React.cloneElement(React.Children.only(this.props.children), {\n\t      style: style,\n\t      className: className,\n\n\t      onMouseDown: this.onMouseDown,\n\t      onTouchStart: this.onTouchStart,\n\t      onMouseUp: this.handleDragEnd,\n\t      onTouchEnd: this.handleDragEnd\n\t    });\n\t  }\n\t});\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t  Copyright (c) 2015 Jed Watson.\n\t  Licensed under the MIT License (MIT), see\n\t  http://jedwatson.github.io/classnames\n\t*/\n\n\tfunction classNames() {\n\t\tvar classes = '';\n\t\tvar arg;\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\targ = arguments[i];\n\t\t\tif (!arg) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ('string' === typeof arg || 'number' === typeof arg) {\n\t\t\t\tclasses += ' ' + arg;\n\t\t\t} else if (Object.prototype.toString.call(arg) === '[object Array]') {\n\t\t\t\tclasses += ' ' + classNames.apply(null, arg);\n\t\t\t} else if ('object' === typeof arg) {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (!arg.hasOwnProperty(key) || !arg[key]) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tclasses += ' ' + key;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn classes.substr(1);\n\t}\n\n\t// safely export classNames for node / browserify\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = classNames;\n\t}\n\n\t// safely export classNames for RequireJS\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\t\treturn classNames;\n\t\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n\n\n/***/ }\n/******/ ])))\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** react-grid-layout.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 34cf3ceb7e654fc8b8e1\n **/","module.exports = require('./lib/ReactGridLayout');\nmodule.exports.Responsive = require('./lib/ResponsiveReactGridLayout');\n\n\n\n/** WEBPACK FOOTER **\n ** ./index-dev.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"React\"\n ** module id = 1\n ** module chunks = 0\n **/","'use strict';\n\nvar assign = require('object-assign');\n\nvar utils = module.exports = {\n\n  /**\n   * Return the bottom coordinate of the layout.\n   *\n   * @param  {Array} layout Layout array.\n   * @return {Number}       Bottom coordinate.\n   */\n  bottom(layout) {\n    var max = 0, bottomY;\n    for (var i = 0, len = layout.length; i < len; i++) {\n      bottomY = layout[i].y + layout[i].h;\n      if (bottomY > max) max = bottomY;\n    }\n    return max;\n  },\n\n  /**\n   * Clones a shallow object.\n   * @param  {Object} obj Object to clone.\n   * @return {Object}   Cloned object.\n   */\n  clone(obj) {\n    return assign({}, obj);\n  },\n\n  /**\n   * Given two layouts, check if they collide.\n   *\n   * @param  {Object} l1 Layout object.\n   * @param  {Object} l2 Layout object.\n   * @return {Boolean}   True if colliding.\n   */\n  collides(l1, l2) {\n    if (l1 === l2) return false; // same element\n    if (l1.x + l1.w <= l2.x) return false; // l1 is left of l2\n    if (l1.x >= l2.x + l2.w) return false; // l1 is right of l2\n    if (l1.y + l1.h <= l2.y) return false; // l1 is above l2\n    if (l1.y >= l2.y + l2.h) return false; // l1 is below l2\n    return true; // boxes overlap\n  },\n\n  /**\n   * Given a layout, compact it. This involves going down each y coordinate and removing gaps\n   * between items.\n   *\n   * @param  {Array} layout Layout.\n   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n   *   vertically.\n   * @return {Array}       Compacted Layout.\n   */\n  compact(layout, verticalCompact) {\n    // Statics go in the compareWith array right away so items flow around them.\n    var compareWith = utils.getStatics(layout), out = [];\n    // We go through the items by row and column.\n    var sorted = utils.sortLayoutItemsByRowCol(layout);\n\n    for (var i = 0, len = sorted.length; i < len; i++) {\n      var l = sorted[i];\n\n      // Don't move static elements\n      if (!l.static) {\n        l = utils.compactItem(compareWith, l, verticalCompact);\n\n        // Add to comparison array. We only collide with items before this one.\n        // Statics are already in this array.\n        compareWith.push(l);\n      }\n\n      // Add to output array to make sure they still come out in the right order.\n      out[layout.indexOf(l)] = l;\n\n      // Clear moved flag, if it exists.\n      delete l.moved;\n    }\n\n    return out;\n  },\n\n  compactItem(compareWith, l, verticalCompact) {\n    if (verticalCompact) {\n      // Move the element up as far as it can go without colliding.\n      while (l.y > 0 && !utils.getFirstCollision(compareWith, l)) {\n        l.y--;\n      }\n    }\n\n    // Move it down, and keep moving it down if it's colliding.\n    var collides;\n    while((collides = utils.getFirstCollision(compareWith, l))) {\n      l.y = collides.y + collides.h;\n    }\n    return l;\n  },\n\n  /**\n   * Given a layout, make sure all elements fit within its bounds.\n   *\n   * @param  {Array} layout Layout array.\n   * @param  {Number} bounds Number of columns.\n   * @return {[type]}        [description]\n   */\n  correctBounds(layout, bounds) {\n    var collidesWith = utils.getStatics(layout);\n    for (var i = 0, len = layout.length; i < len; i++) {\n      var l = layout[i];\n      // Overflows right\n      if (l.x + l.w > bounds.cols) l.x = bounds.cols - l.w;\n      // Overflows left\n      if (l.x < 0) {\n        l.x = 0;\n        l.w = bounds.cols;\n      }\n      if (!l.static) collidesWith.push(l);\n      else {\n        // If this is static and collides with other statics, we must move it down.\n        // We have to do something nicer than just letting them overlap.\n        while(utils.getFirstCollision(collidesWith, l)) {\n          l.y++;\n        }\n      }\n\n    }\n    return layout;\n  },\n\n  /**\n   * Get a layout item by ID. Used so we can override later on if necessary.\n   *\n   * @param  {Array}  layout Layout array.\n   * @param  {Number} id     ID\n   * @return {LayoutItem}    Item at ID.\n   */\n  getLayoutItem(layout, id) {\n    id = \"\" + id;\n    for (var i = 0, len = layout.length; i < len; i++) {\n      if (\"\" + layout[i].i === id) return layout[i];\n    }\n  },\n\n  /**\n   * Returns the first item this layout collides with.\n   * It doesn't appear to matter which order we approach this from, although\n   * perhaps that is the wrong thing to do.\n   *\n   * @param  {Object} layoutItem Layout item.\n   * @return {Object|undefined}  A colliding layout item, or undefined.\n   */\n  getFirstCollision(layout, layoutItem) {\n    for (var i = 0, len = layout.length; i < len; i++) {\n      if (utils.collides(layout[i], layoutItem)) return layout[i];\n    }\n  },\n\n  getAllCollisions(layout, layoutItem) {\n    var out = [];\n    for (var i = 0, len = layout.length; i < len; i++) {\n      if (utils.collides(layout[i], layoutItem)) out.push(layout[i]);\n    }\n    return out;\n  },\n\n  /**\n   * Get all static elements.\n   * @param  {Array} layout Array of layout objects.\n   * @return {Array}        Array of static layout items..\n   */\n  getStatics(layout) {\n    var out = [];\n    for (var i = 0, len = layout.length; i < len; i++) {\n      if (layout[i].static) out.push(layout[i]);\n    }\n    return out;\n  },\n\n  /**\n   * Move an element. Responsible for doing cascading movements of other elements.\n   *\n   * @param  {Array}      layout Full layout to modify.\n   * @param  {LayoutItem} l      element to move.\n   * @param  {Number}     [x]    X position in grid units.\n   * @param  {Number}     [y]    Y position in grid units.\n   * @param  {Boolean}    [isUserAction] If true, designates that the item we're moving is\n   *                                     being dragged/resized by th euser.\n   */\n  moveElement(layout, l, x, y, isUserAction) {\n    if (l.static) return layout;\n\n    // Short-circuit if nothing to do.\n    if (l.y === y && l.x === x) return layout;\n\n    var movingUp = l.y > y;\n    // This is quite a bit faster than extending the object\n    if (x !== undefined) l.x = x;\n    if (y !== undefined) l.y = y;\n    l.moved = true;\n\n    // If this collides with anything, move it.\n    // When doing this comparison, we have to sort the items we compare with\n    // to ensure, in the case of multiple collisions, that we're getting the\n    // nearest collision.\n    var sorted = utils.sortLayoutItemsByRowCol(layout);\n    if (movingUp) sorted = sorted.reverse();\n    var collisions = utils.getAllCollisions(sorted, l);\n\n    // Move each item that collides away from this element.\n    for (var i = 0, len = collisions.length; i < len; i++) {\n      var collision = collisions[i];\n      // console.log('resolving collision between', l.i, 'at', l.y, 'and', collision.i, 'at', collision.y);\n\n      // Short circuit so we can't infinite loop\n      if (collision.moved) continue;\n\n      // This makes it feel a bit more precise by waiting to swap for just a bit when moving up.\n      if (l.y > collision.y && l.y - collision.y > collision.h / 4) continue;\n\n      // Don't move static items - we have to move *this* element away\n      if (collision.static) {\n        layout = utils.moveElementAwayFromCollision(layout, collision, l, isUserAction);\n      } else {\n        layout = utils.moveElementAwayFromCollision(layout, l, collision, isUserAction);\n      }\n    }\n\n    return layout;\n  },\n\n  /**\n   * This is where the magic needs to happen - given a collision, move an element away from the collision.\n   * We attempt to move it up if there's room, otherwise it goes below.\n   *\n   * @param  {Array} layout            Full layout to modify.\n   * @param  {LayoutItem} collidesWith Layout item we're colliding with.\n   * @param  {LayoutItem} itemToMove   Layout item we're moving.\n   * @param  {Boolean} [isUserAction]  If true, designates that the item we're moving is being dragged/resized\n   *                                   by the user.\n   */\n  moveElementAwayFromCollision(layout, collidesWith, itemToMove, isUserAction) {\n\n    // If there is enough space above the collision to put this element, move it there.\n    // We only do this on the main collision as this can get funky in cascades and cause\n    // unwanted swapping behavior.\n    if (isUserAction) {\n      // Make a mock item so we don't modify the item here, only modify in moveElement.\n      var fakeItem = {\n        x: itemToMove.x,\n        y: itemToMove.y,\n        w: itemToMove.w,\n        h: itemToMove.h,\n      };\n      fakeItem.y = Math.max(collidesWith.y - itemToMove.h, 0);\n      if (!utils.getFirstCollision(layout, fakeItem)) {\n        return utils.moveElement(layout, itemToMove, undefined, fakeItem.y);\n      }\n    }\n\n    // Previously this was optimized to move below the collision directly, but this can cause problems\n    // with cascading moves, as an item may actually leapflog a collision and cause a reversal in order.\n    return utils.moveElement(layout, itemToMove, undefined, itemToMove.y + 1);\n  },\n\n  /**\n   * Helper to convert a number to a percentage string.\n   *\n   * @param  {Number} num Any number\n   * @return {String}     That number as a percentage.\n   */\n  perc(num) {\n    return num * 100 + '%';\n  },\n\n  setTransform(style, coords) {\n    // Replace unitless items with px\n    var x = ('' + coords[0]).replace(/(\\d)$/, '$1px');\n    var y = ('' + coords[1]).replace(/(\\d)$/, '$1px');\n    style.transform = \"translate(\" + x + \",\" + y + \")\";\n    style.WebkitTransform = \"translate(\" + x + \",\" + y + \")\";\n    style.MozTransform = \"translate(\" + x + \",\" + y + \")\";\n    style.msTransform = \"translate(\" + x + \",\" + y + \")\";\n    style.OTransform = \"translate(\" + x + \",\" + y + \")\";\n    return style;\n  },\n\n  /**\n   * Get layout items sorted from top left to right and down.\n   *\n   * @return {Array} Array of layout objects.\n   * @return {Array}        Layout, sorted static items first.\n   */\n  sortLayoutItemsByRowCol(layout) {\n    return [].concat(layout).sort(function(a, b) {\n      if (a.y > b.y || (a.y === b.y && a.x > b.x)) {\n        return 1;\n      }\n      return -1;\n    });\n  },\n\n  /**\n   * Generate a layout using the initialLayout an children as a template.\n   * Missing entries will be added, extraneous ones will be truncated.\n   *\n   * @param  {Array}  initialLayout Layout passed in through props.\n   * @param  {String} breakpoint    Current responsive breakpoint.\n   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n   *   vertically.\n   * @return {Array}                Working layout.\n   */\n  synchronizeLayoutWithChildren(initialLayout, children, cols, verticalCompact) {\n    // ensure 'children' is always an array\n    if (!Array.isArray(children)) {\n      children = [children];\n    }\n    initialLayout = initialLayout || [];\n\n    // Generate one layout item per child.\n    var layout = [];\n    for (var i = 0, len = children.length; i < len; i++) {\n      var child = children[i];\n      // Don't overwrite if it already exists.\n      var exists = utils.getLayoutItem(initialLayout, child.key);\n      if (exists) {\n        // Ensure 'i' is always a string\n        exists.i = '' + exists.i;\n        layout.push(exists);\n        continue;\n      }\n      // New item: attempt to use a layout item from the child, if it exists.\n      var g = child.props._grid;\n      if (g) {\n        utils.validateLayout([g], 'ReactGridLayout.child');\n        // Validated; add it to the layout. Bottom 'y' possible is the bottom of the layout.\n        // This allows you to do nice stuff like specify {y: Infinity}\n        if (verticalCompact) {\n          layout.push(assign({}, g, {y: Math.min(utils.bottom(layout), g.y), i: child.key}));\n        } else {\n          layout.push(assign({}, g, {y: g.y, i:child.key}));\n        }\n      } else {\n        // Nothing provided: ensure this is added to the bottom\n        layout.push({w: 1, h: 1, x: 0, y: utils.bottom(layout), i: child.key});\n      }\n    }\n\n    // Correct the layout.\n    layout = utils.correctBounds(layout, {cols: cols});\n    layout = utils.compact(layout, verticalCompact);\n\n    return layout;\n  },\n\n  /**\n   * Validate a layout. Throws errors.\n   *\n   * @param  {Array}  layout        Array of layout items.\n   * @param  {String} [contextName] Context name for errors.\n   * @throw  {Error}                Validation error.\n   */\n  validateLayout(layout, contextName) {\n    contextName = contextName || \"Layout\";\n    var subProps = ['x', 'y', 'w', 'h'];\n    if (!Array.isArray(layout)) throw new Error(contextName + \" must be an array!\");\n    for (var i = 0, len = layout.length; i < len; i++) {\n      for (var j = 0; j < subProps.length; j++) {\n        if (typeof layout[i][subProps[j]] !== 'number') {\n          throw new Error('ReactGridLayout: ' + contextName + '[' + i + '].' + subProps[j] + ' must be a Number!');\n        }\n      }\n      if (layout[i].static !== undefined && typeof layout[i].static !== 'boolean') {\n        throw new Error('ReactGridLayout: ' + contextName + '[' + i + '].static must be a Boolean!');\n      }\n    }\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/utils.js\n **/","'use strict';\nvar deepEqual = require('deep-equal');\n\n// Like PureRenderMixin, but with deep comparisons.\nvar PureDeepRenderMixin = {\n  shouldComponentUpdate: function(nextProps, nextState) {\n    return !deepEqual(this.props, nextProps) ||\n           !deepEqual(this.state, nextState);\n  }\n};\n\nmodule.exports = PureDeepRenderMixin;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/mixins/PureDeepRenderMixin.js\n **/","'use strict';\n\nfunction ToObject(val) {\n\tif (val == null) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nmodule.exports = Object.assign || function (target, source) {\n\tvar from;\n\tvar keys;\n\tvar to = ToObject(target);\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = arguments[s];\n\t\tkeys = Object.keys(Object(from));\n\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tto[keys[i]] = from[keys[i]];\n\t\t}\n\t}\n\n\treturn to;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../react-resizable/~/object-assign/index.js\n ** module id = 4\n ** module chunks = 0\n **/","'use strict';\nvar React = require('react');\nvar GridItem = require('./GridItem');\nvar utils = require('./utils');\nvar PureDeepRenderMixin = require('./mixins/PureDeepRenderMixin');\nvar WidthListeningMixin = require('./mixins/WidthListeningMixin');\n\n/**\n * A reactive, fluid grid layout with draggable, resizable components.\n */\nvar ReactGridLayout = React.createClass({\n  mixins: [PureDeepRenderMixin, WidthListeningMixin],\n\n  propTypes: {\n    //\n    // Basic props\n    //\n\n    // If true, the container height swells and contracts to fit contents\n    autoSize: React.PropTypes.bool,\n    // # of cols.\n    cols: React.PropTypes.number,\n\n    // A selector that will not be draggable.\n    draggableCancel: React.PropTypes.string,\n    // A selector for the draggable handler\n    draggableHandle: React.PropTypes.string,\n\n    // If true, the layout will compact vertically\n    verticalCompact: React.PropTypes.bool,\n\n    // layout is an array of object with the format:\n    // {x: Number, y: Number, w: Number, h: Number}\n    layout: function(props, propName, componentName) {\n      var layout = props.layout;\n      // I hope you're setting the _grid property on the grid items\n      if (layout === undefined) return;\n      utils.validateLayout(layout, 'layout');\n    },\n\n    layouts: function(props, propName, componentName) {\n      if (props.layouts) {\n        throw new Error(\"ReactGridLayout does not use `layouts`: Use ReactGridLayout.Responsive.\");\n      }\n    },\n\n    // margin between items [x, y] in px\n    margin: React.PropTypes.array,\n    // Rows have a static height, but you can change this based on breakpoints if you like\n    rowHeight: React.PropTypes.number,\n\n    //\n    // Flags\n    //\n    isDraggable: React.PropTypes.bool,\n    isResizable: React.PropTypes.bool,\n    // Use CSS transforms instead of top/left\n    useCSSTransforms: React.PropTypes.bool,\n\n    //\n    // Callbacks\n    //\n\n    // Callback so you can save the layout.\n    // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n    onLayoutChange: React.PropTypes.func,\n\n    // Calls when drag starts. Callback is of the signature (layout, oldItem, newItem, placeholder, e).\n    // All callbacks below have the same signature. 'start' and 'stop' callbacks omit the 'placeholder'.\n    onDragStart: React.PropTypes.func,\n    // Calls on each drag movement.\n    onDrag: React.PropTypes.func,\n    // Calls when drag is complete.\n    onDragStop: React.PropTypes.func,\n    //Calls when resize starts.\n    onResizeStart: React.PropTypes.func,\n    // Calls when resize movement happens.\n    onResize: React.PropTypes.func,\n    // Calls when resize is complete.\n    onResizeStop: React.PropTypes.func,\n\n    //\n    // Other validations\n    //\n\n    // Children must not have duplicate keys.\n    children: function(props, propName, componentName) {\n      React.PropTypes.node.apply(this, arguments);\n      var children = props[propName];\n\n      // Check children keys for duplicates. Throw if found.\n      var keys = {};\n      React.Children.forEach(children, function(child, i, list) {\n        if (keys[child.key]) {\n          throw new Error(\"Duplicate child key found! This will cause problems in ReactGridLayout.\");\n        }\n        keys[child.key] = true;\n      });\n    }\n  },\n\n  getDefaultProps() {\n    return {\n      autoSize: true,\n      cols: 12,\n      rowHeight: 150,\n      layout: [],\n      margin: [10, 10],\n      isDraggable: true,\n      isResizable: true,\n      useCSSTransforms: true,\n      verticalCompact: true,\n      onLayoutChange: function(){},\n      onDragStart: function() {},\n      onDrag: function() {},\n      onDragStop: function() {},\n      onResizeStart: function() {},\n      onResize: function() {},\n      onResizeStop: function() {}\n    };\n  },\n\n  getInitialState() {\n    return {\n      activeDrag: null,\n      isMounted: false,\n      layout: utils.synchronizeLayoutWithChildren(this.props.layout, this.props.children, this.props.cols, this.props.verticalCompact),\n      width: this.props.initialWidth\n    };\n  },\n\n  componentDidMount() {\n    // Call back with layout on mount. This should be done after correcting the layout width\n    // to ensure we don't rerender with the wrong width.\n    this.props.onLayoutChange(this.state.layout);\n    this.setState({isMounted: true});\n  },\n\n  componentWillReceiveProps(nextProps) {\n    // This allows you to set the width manually if you like.\n    // Use manual width changes in combination with `listenToWindowResize: false`\n    if (nextProps.width !== this.props.width) this.onWidthChange(nextProps.width);\n\n    // If children change, regenerate the layout.\n    if (nextProps.children.length !== this.props.children.length) {\n      this.setState({\n        layout: utils.synchronizeLayoutWithChildren(this.state.layout, nextProps.children, nextProps.cols, this.props.verticalCompact)\n      });\n    }\n\n    // Allow parent to set layout directly.\n    if (nextProps.layout && JSON.stringify(nextProps.layout) !== JSON.stringify(this.state.layout)) {\n      this.setState({\n        layout: utils.synchronizeLayoutWithChildren(nextProps.layout, nextProps.children, nextProps.cols, this.props.verticalCompact)\n      });\n    }\n  },\n\n  componentDidUpdate(prevProps, prevState) {\n    // Call back so we can store the layout\n    // Do it only when a resize/drag is not active, otherwise there are way too many callbacks\n    if (this.state.layout !== prevState.layout && !this.state.activeDrag) {\n      this.props.onLayoutChange(this.state.layout, this.state.layouts);\n    }\n  },\n\n  /**\n   * Calculates a pixel value for the container.\n   * @return {String} Container height in pixels.\n   */\n  containerHeight() {\n    if (!this.props.autoSize) return;\n    return utils.bottom(this.state.layout) * this.props.rowHeight + this.props.margin[1] + 'px';\n  },\n\n  /**\n   * When the width changes, save it to state. This helps with left/width calculations.\n   */\n  onWidthChange(width) {\n    this.setState({width: width});\n  },\n\n  /**\n   * When dragging starts\n   * @param {Number} i Index of the child\n   * @param {Number} x X position of the move\n   * @param {Number} y Y position of the move\n   * @param {Event} e The mousedown event\n   * @param {Element} element The current dragging DOM element\n   * @param {Object} position Drag information\n   */\n  onDragStart(i, x, y, {e, element, position}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n\n    // No need to clone, `l` hasn't changed.\n    this.props.onDragStart(layout, l, l, null, e);\n  },\n  /**\n   * Each drag movement create a new dragelement and move the element to the dragged location\n   * @param {Number} i Index of the child\n   * @param {Number} x X position of the move\n   * @param {Number} y Y position of the move\n   * @param {Event} e The mousedown event\n   * @param {Element} element The current dragging DOM element\n   * @param {Object} position Drag information\n   */\n  onDrag(i, x, y, {e, element, position}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n    // Clone layout item so we can pass it to the callback.\n    var oldL = utils.clone(l);\n\n    // Create placeholder (display only)\n    var placeholder = {\n      w: l.w, h: l.h, x: l.x, y: l.y, placeholder: true, i: i\n    };\n\n    // Move the element to the dragged location.\n    layout = utils.moveElement(layout, l, x, y, true /* isUserAction */);\n\n    this.props.onDrag(layout, oldL, l, placeholder, e);\n\n\n    this.setState({\n      layout: utils.compact(layout, this.props.verticalCompact),\n      activeDrag: placeholder\n    });\n  },\n\n  /**\n   * When dragging stops, figure out which position the element is closest to and update its x and y.\n   * @param  {Number} i Index of the child.\n   * @param {Number} i Index of the child\n   * @param {Number} x X position of the move\n   * @param {Number} y Y position of the move\n   * @param {Event} e The mousedown event\n   * @param {Element} element The current dragging DOM element\n   * @param {Object} position Drag information\n   */\n  onDragStop(i, x, y, {e, element, position}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n    var oldL = utils.clone(l);\n\n    // Move the element here\n    layout = utils.moveElement(layout, l, x, y, true /* isUserAction */);\n\n    this.props.onDragStop(layout, oldL, l, null, e);\n\n    // Set state\n    this.setState({ layout: utils.compact(layout, this.props.verticalCompact), activeDrag: null });\n  },\n\n  onResizeStart(i, w, h, {e, element, size}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n\n    // No need to clone, item hasn't changed\n    this.props.onResizeStart(layout, l, l, null, e);\n  },\n\n  onResize(i, w, h, {e, element, size}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n    var oldL = utils.clone(l);\n\n    // Set new width and height.\n    l.w = w;\n    l.h = h;\n\n    // Create placeholder element (display only)\n    var placeholder = {\n      w: w, h: h, x: l.x, y: l.y, placeholder: true, i: i\n    };\n\n    this.props.onResize(layout, oldL, l, placeholder, e);\n\n    // Re-compact the layout and set the drag placeholder.\n    this.setState({ layout: utils.compact(layout, this.props.verticalCompact), activeDrag: placeholder });\n  },\n\n  onResizeStop(i, x, y, {e, element, size}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n    var oldL = utils.clone(l);\n\n    this.props.onResizeStop(layout, oldL, l, null, e);\n\n    this.setState({ activeDrag: null, layout: utils.compact(layout, this.props.verticalCompact) });\n  },\n\n  /**\n   * Create a placeholder object.\n   * @return {Element} Placeholder div.\n   */\n  placeholder() {\n    if (!this.state.activeDrag) return '';\n\n    // {...this.state.activeDrag} is pretty slow, actually\n    return (\n      <GridItem\n        w={this.state.activeDrag.w}\n        h={this.state.activeDrag.h}\n        x={this.state.activeDrag.x}\n        y={this.state.activeDrag.y}\n        i={this.state.activeDrag.i}\n        isPlaceholder={true}\n        className=\"react-grid-placeholder\"\n        containerWidth={this.state.width}\n        cols={this.props.cols}\n        margin={this.props.margin}\n        rowHeight={this.props.rowHeight}\n        isDraggable={false}\n        isResizable={false}\n        useCSSTransforms={this.props.useCSSTransforms}\n        >\n        <div />\n      </GridItem>\n    );\n  },\n\n  /**\n   * Given a grid item, set its style attributes & surround in a <Draggable>.\n   * @param  {Element} child React element.\n   * @param  {Number}  i     Index of element.\n   * @return {Element}       Element wrapped in draggable and properly placed.\n   */\n  processGridItem(child) {\n    var i = child.key;\n    var l = utils.getLayoutItem(this.state.layout, i);\n\n    // watchStart property tells Draggable to react to changes in the start param\n    // Must be turned off on the item we're dragging as the changes in `activeDrag` cause rerenders\n    var drag = this.state.activeDrag;\n    var moveOnStartChange = drag && drag.i === i ? false : true;\n\n    // Parse 'static'. Any properties defined directly on the grid item will take precedence.\n    var draggable, resizable;\n    if (l.static || this.props.isDraggable === false) draggable = false;\n    if (l.static || this.props.isResizable === false) resizable = false;\n\n    return (\n      <GridItem\n        containerWidth={this.state.width}\n        cols={this.props.cols}\n        margin={this.props.margin}\n        rowHeight={this.props.rowHeight}\n        moveOnStartChange={moveOnStartChange}\n        cancel={this.props.draggableCancel}\n        handle={this.props.draggableHandle}\n        onDragStop={this.onDragStop}\n        onDragStart={this.onDragStart}\n        onDrag={this.onDrag}\n        onResizeStart={this.onResizeStart}\n        onResize={this.onResize}\n        onResizeStop={this.onResizeStop}\n        isDraggable={draggable}\n        isResizable={resizable}\n        useCSSTransforms={this.props.useCSSTransforms && this.state.isMounted}\n        usePercentages={!this.state.isMounted}\n        {...l}\n        >\n        {child}\n      </GridItem>\n    );\n  },\n\n  render() {\n    // Calculate classname\n    var {className, ...props} = this.props;\n    className = 'react-grid-layout ' + (className || '');\n\n    return (\n      <div {...props} className={className} style={{height: this.containerHeight()}}>\n        {React.Children.map(this.props.children, this.processGridItem)}\n        {this.placeholder()}\n      </div>\n    );\n  }\n});\n\nmodule.exports = ReactGridLayout;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/ReactGridLayout.jsx\n **/","'use strict';\nvar React = require('react');\n\n/**\n * A simple mixin that provides facility for listening to container resizes.\n */\nvar WidthListeningMixin = {\n\n  propTypes: {\n    // This allows setting this on the server side\n    initialWidth: React.PropTypes.number,\n\n    // If false, you should supply width yourself. Good if you want to debounce resize events\n    // or reuse a handler from somewhere else.\n    listenToWindowResize: React.PropTypes.bool\n  },\n\n  getDefaultProps: function() {\n    return {\n      initialWidth: 1280,\n      listenToWindowResize: true\n    };\n  },\n\n  componentDidMount: function() {\n    if (this.props.listenToWindowResize) {\n      window.addEventListener('resize', this.onWindowResize);\n      // This is intentional. Once to properly set the breakpoint and resize the elements,\n      // and again to compensate for any scrollbar that appeared because of the first step.\n      this.onWindowResize();\n      this.onWindowResize();\n    }\n  },\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onWindowResize);\n  },\n\n  /**\n   * On window resize, update width.\n   */\n  onWindowResize: function() {\n    this.onWidthChange(this.getDOMNode().offsetWidth);\n  }\n\n};\n\nmodule.exports = WidthListeningMixin;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/mixins/WidthListeningMixin.js\n **/","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n* @providesModule ReactComponentWithPureRenderMixin\n*/\n\n'use strict';\n\nvar shallowEqual = require(\"./shallowEqual\");\n\n/**\n * If your React component's render function is \"pure\", e.g. it will render the\n * same result given the same props and state, provide this Mixin for a\n * considerable performance boost.\n *\n * Most React components have pure render functions.\n *\n * Example:\n *\n *   var ReactComponentWithPureRenderMixin =\n *     require('ReactComponentWithPureRenderMixin');\n *   React.createClass({\n *     mixins: [ReactComponentWithPureRenderMixin],\n *\n *     render: function() {\n *       return <div className={this.props.className}>foo</div>;\n *     }\n *   });\n *\n * Note: This only checks shallow equality for props and state. If these contain\n * complex data structures this mixin may have false-negatives for deeper\n * differences. Only mixin to components which have simple props and state, or\n * use `forceUpdate()` when you know deep data structures have changed.\n */\nvar ReactComponentWithPureRenderMixin = {\n  shouldComponentUpdate: function(nextProps, nextState) {\n    return !shallowEqual(this.props, nextProps) ||\n           !shallowEqual(this.state, nextState);\n  }\n};\n\nmodule.exports = ReactComponentWithPureRenderMixin;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/ReactComponentWithPureRenderMixin.js\n ** module id = 7\n ** module chunks = 0\n **/","'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar React = require('react');\nvar Draggable = require('react-draggable');\nvar PureRenderMixin = require('react/lib/ReactComponentWithPureRenderMixin');\nvar assign = require('object-assign');\nvar cloneElement = require('./cloneElement');\n\nvar Resizable = module.exports = React.createClass({\n  displayName: 'Resizable',\n  mixins: [PureRenderMixin],\n\n  propTypes: {\n    // Require that one and only one child be present.\n    children: React.PropTypes.element.isRequired,\n    // Functions\n    onResizeStop: React.PropTypes.func,\n    onResizeStart: React.PropTypes.func,\n    onResize: React.PropTypes.func,\n\n    width: React.PropTypes.number.isRequired,\n    height: React.PropTypes.number.isRequired,\n    // If you change this, be sure to update your css\n    handleSize: React.PropTypes.array,\n    // These will be passed wholesale to react-draggable\n    draggableOpts: React.PropTypes.object\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      handleSize: [20, 20]\n    };\n  },\n\n  getInitialState: function getInitialState() {\n    return {\n      bounds: this.constraintsToBounds(),\n      initialWidth: this.props.width,\n      initialHeight: this.props.height\n    };\n  },\n\n  componentWillReceiveProps: function componentWillReceiveProps(props) {\n    if (!this.state.resizing) {\n      this.setState({\n        initialWidth: props.width,\n        initialHeight: props.height\n      });\n      this.refs.draggable.resetState();\n    }\n  },\n\n  constraintsToBounds: function constraintsToBounds() {\n    var p = this.props;\n    var mins = p.minConstraints || p.handleSize;\n    var maxes = p.maxConstraints || [Infinity, Infinity];\n    return {\n      left: mins[0] - p.width,\n      top: mins[1] - p.height,\n      right: maxes[0] - p.width,\n      bottom: maxes[1] - p.height\n    };\n  },\n\n  /**\n   * Wrapper around drag events to provide more useful data.\n   *\n   * @param  {String} handlerName Handler name to wrap.\n   * @return {Function}           Handler function.\n   */\n  resizeHandler: function resizeHandler(handlerName) {\n    var me = this;\n    return function (e, _ref) {\n      var node = _ref.node;\n      var position = _ref.position;\n\n      me.props[handlerName] && me.props[handlerName](e, { node: node, size: calcWH(me.state, position) });\n\n      if (handlerName === 'onResizeStart') {\n        me.setState({ resizing: true });\n      } else if (handlerName === 'onResizeStop') {\n        me.setState({ resizing: false });\n      }\n    };\n  },\n\n  render: function render() {\n    var p = this.props,\n        s = this.state;\n\n    // What we're doing here is getting the child of this element, and cloning it with this element's props.\n    // We are then defining its children as:\n    // Its original children (resizable's child's children), and\n    // A draggable handle.\n    return cloneElement(p.children, assign({}, p, {\n      children: [p.children.props.children, React.createElement(\n        Draggable,\n        _extends({}, p.draggableOpts, {\n          ref: 'draggable',\n          onStop: this.resizeHandler('onResizeStop'),\n          onStart: this.resizeHandler('onResizeStart'),\n          onDrag: this.resizeHandler('onResize'),\n          bounds: this.state.bounds\n        }),\n        React.createElement('span', { className: 'react-resizable-handle' })\n      )]\n    }));\n  }\n});\n\n/**\n * Parse left and top coordinates.\n * @param  {Number} options.left Left coordinate.\n * @param  {Number} options.top  Top coordinate.\n * @return {Object}              Coordinates\n */\nfunction calcWH(_ref, _ref2) {\n  var initialWidth = _ref.initialWidth;\n  var initialHeight = _ref.initialHeight;\n  var left = _ref2.left;\n  var top = _ref2.top;\n\n  return { width: initialWidth + left, height: initialHeight + top };\n}\n\n\n/** WEBPACK FOOTER **\n ** ../react-resizable/build/Resizable.js\n **/","'use strict';\nvar React = require('react');\nvar cloneWithProps = require('react/lib/cloneWithProps');\nvar utils = require('./utils');\nvar Draggable = require('react-draggable');\nvar Resizable = require('react-resizable').Resizable;\nvar PureDeepRenderMixin = require('./mixins/PureDeepRenderMixin');\n\n/**\n * An individual item within a ReactGridLayout.\n */\nvar GridItem = React.createClass({\n  mixins: [PureDeepRenderMixin],\n\n  propTypes: {\n    // Children must be only a single element\n    children: React.PropTypes.element,\n\n    // General grid attributes\n    cols: React.PropTypes.number.isRequired,\n    containerWidth: React.PropTypes.number.isRequired,\n    rowHeight: React.PropTypes.number.isRequired,\n    margin: React.PropTypes.array.isRequired,\n\n    // These are all in grid units\n    x: React.PropTypes.number.isRequired,\n    y: React.PropTypes.number.isRequired,\n    w: React.PropTypes.number.isRequired,\n    h: React.PropTypes.number.isRequired,\n\n    // All optional\n    minW: function(props, propName, componentName) {\n      React.PropTypes.number.apply(this, arguments);\n      if (props.minW > props.w || props.minW > props.maxW) constraintError('minW', props);\n    },\n    maxW: function(props, propName, componentName) {\n      React.PropTypes.number.apply(this, arguments);\n      if (props.maxW < props.w || props.maxW < props.minW) constraintError('maxW', props);\n    },\n    minH: function(props, propName, componentName) {\n      React.PropTypes.number.apply(this, arguments);\n      if (props.minH > props.h || props.minH > props.maxH) constraintError('minH', props);\n    },\n    maxH: function(props, propName, componentName) {\n      React.PropTypes.number.apply(this, arguments);\n      if (props.maxH < props.h || props.maxH < props.minH) constraintError('maxH', props);\n    },\n\n    // ID is nice to have for callbacks\n    i: React.PropTypes.string.isRequired,\n\n    // If true, item will be repositioned when x/y/w/h change\n    moveOnStartChange: React.PropTypes.bool,\n\n    // Functions\n    onDragStop: React.PropTypes.func,\n    onDragStart: React.PropTypes.func,\n    onDrag: React.PropTypes.func,\n    onResizeStop: React.PropTypes.func,\n    onResizeStart: React.PropTypes.func,\n    onResize: React.PropTypes.func,\n\n    // Flags\n    isDraggable: React.PropTypes.bool,\n    isResizable: React.PropTypes.bool,\n    // Use CSS transforms instead of top/left\n    useCSSTransforms: React.PropTypes.bool,\n    isPlaceholder: React.PropTypes.bool,\n\n    // Others\n    className: React.PropTypes.string,\n    // Selector for draggable handle\n    handle: React.PropTypes.string,\n    // Selector for draggable cancel (see react-draggable)\n    cancel: React.PropTypes.string\n  },\n\n  getDefaultProps() {\n    return {\n      isDraggable: true,\n      isResizable: true,\n      useCSSTransforms: true,\n      className: '',\n      cancel: '',\n      minH: 1,\n      minW: 1,\n      maxH: Infinity,\n      maxW: Infinity\n    };\n  },\n\n  getInitialState() {\n    return {\n      resizing: false,\n      className: ''\n    };\n  },\n\n  /**\n   * Return position on the page given an x, y, w, h.\n   * left, top, width, height are all in pixels.\n   * @param  {Number}  x             X coordinate in grid units.\n   * @param  {Number}  y             Y coordinate in grid units.\n   * @param  {Number}  w             W coordinate in grid units.\n   * @param  {Number}  h             H coordinate in grid units.\n   * @return {Object}                Object containing coords.\n   */\n  calcPosition(x, y, w, h) {\n    var p = this.props;\n    var width = p.containerWidth - p.margin[0];\n    var out = {\n      left: width * (x / p.cols) + p.margin[0],\n      top: p.rowHeight * y + p.margin[1],\n      width: width * (w / p.cols) - p.margin[0],\n      height: h * p.rowHeight - p.margin[1]\n    };\n    return out;\n  },\n\n  /**\n   * Translate x and y coordinates from pixels to grid units.\n   * @param  {Number} options.left  Left offset in pixels.\n   * @param  {Number} options.top   Top offset in pixels.\n   * @return {Object}               x and y in grid units.\n   */\n  calcXY({left, top}) {\n    left = left - this.props.margin[0];\n    top = top - this.props.margin[1];\n    // This is intentional; because so much of the logic on moving boxes up/down relies\n    // on an exact y position, we only round the x, not the y.\n    var x = Math.round((left / this.props.containerWidth) * this.props.cols);\n    var y = Math.floor(top / this.props.rowHeight);\n    x = Math.max(Math.min(x, this.props.cols), 0);\n    y = Math.max(y, 0);\n    return {x, y};\n  },\n\n  /**\n   * Given a height and width in pixel values, calculate grid units.\n   * @param  {Number} options.height Height in pixels.\n   * @param  {Number} options.width  Width in pixels.\n   * @return {Object}                w, h as grid units.\n   */\n  calcWH({height, width}) {\n    width = width + this.props.margin[0];\n    height = height + this.props.margin[1];\n    var w = Math.round((width / this.props.containerWidth) * this.props.cols);\n    var h = Math.round(height / this.props.rowHeight);\n    w = Math.max(Math.min(w, this.props.cols - this.props.x), 0);\n    h = Math.max(h, 0);\n    return {w, h};\n  },\n\n  /**\n   * This is where we set the grid item's absolute placement. It gets a little tricky because we want to do it\n   * well when server rendering, and the only way to do that properly is to use percentage width/left because\n   * we don't know exactly what the browser viewport is.\n   * Unfortunately, CSS Transforms, which are great for performance, break in this instance because a percentage\n   * left is relative to the item itself, not its container! So we cannot use them on the server rendering pass.\n   *\n   * @param  {Object} pos Position object with width, height, left, top.\n   * @return {Object}     Style object.\n   */\n  createStyle(pos) {\n    var style = {\n      width: pos.width + 'px',\n      height: pos.height + 'px',\n      left: pos.left + 'px',\n      top: pos.top + 'px',\n      position: 'absolute'\n    };\n\n    // This is used for server rendering.\n    if (this.props.usePercentages) {\n      pos.left = utils.perc(pos.left / this.props.containerWidth);\n      style.left = pos.left;\n      style.width = utils.perc(pos.width / this.props.containerWidth);\n    }\n\n    // CSS Transforms support\n    if (this.props.useCSSTransforms) {\n      utils.setTransform(style, [pos.left, pos.top]);\n      delete style.left;\n      delete style.top;\n    }\n\n    return style;\n  },\n\n  /**\n   * Mix a Draggable instance into a child.\n   * @param  {Element} child    Child element.\n   * @param  {Object} position  Position object (pixel values)\n   * @return {Element}          Child wrapped in Draggable.\n   */\n  mixinDraggable(child, position) {\n    return (\n      <Draggable\n        start={{x: position.left, y: position.top}}\n        moveOnStartChange={this.props.moveOnStartChange}\n        onStop={this.onDragHandler('onDragStop')}\n        onStart={this.onDragHandler('onDragStart')}\n        onDrag={this.onDragHandler('onDrag')}\n        handle={this.props.handle}\n        cancel={\".react-resizable-handle \" + this.props.cancel}\n        useCSSTransforms={this.props.useCSSTransforms}\n        >\n        {child}\n      </Draggable>\n    );\n  },\n\n  /**\n   * Mix a Resizable instance into a child.\n   * @param  {Element} child    Child element.\n   * @param  {Object} position  Position object (pixel values)\n   * @return {Element}          Child wrapped in Resizable.\n   */\n  mixinResizable(child, position) {\n    var p = this.props;\n    // This is the max possible width - doesn't go to infinity because of the width of the window\n    var maxWidth = this.calcPosition(0, 0, p.cols - p.x, 0).width;\n\n    // Calculate min/max constraints using our min & maxes\n    var mins = this.calcPosition(0, 0, p.minW, p.minH);\n    var maxes = this.calcPosition(0, 0, p.maxW, p.maxH);\n    var minConstraints = [mins.width, mins.height];\n    var maxConstraints = [Math.min(maxes.width, maxWidth), Math.min(maxes.height, Infinity)];\n    return (\n      <Resizable\n        width={position.width}\n        height={position.height}\n        minConstraints={minConstraints}\n        maxConstraints={maxConstraints}\n        onResizeStop={this.onResizeHandler('onResizeStop')}\n        onResizeStart={this.onResizeHandler('onResizeStart')}\n        onResize={this.onResizeHandler('onResize')}\n        >\n        {child}\n      </Resizable>\n    );\n  },\n\n  /**\n   * Wrapper around drag events to provide more useful data.\n   * All drag events call the function with the given handler name,\n   * with the signature (index, x, y).\n   *\n   * @param  {String} handlerName Handler name to wrap.\n   * @return {Function}           Handler function.\n   */\n  onDragHandler(handlerName) {\n    var me = this;\n    return function(e, {element, position}) {\n      if (!me.props[handlerName]) return;\n      // Get new XY\n      var {x, y} = me.calcXY(position);\n\n      // Cap x at numCols\n      x = Math.min(x, me.props.cols - me.props.w);\n\n      me.props[handlerName](me.props.i, x, y, {e, element, position});\n    };\n  },\n\n  /**\n   * Wrapper around drag events to provide more useful data.\n   * All drag events call the function with the given handler name,\n   * with the signature (index, x, y).\n   *\n   * @param  {String} handlerName Handler name to wrap.\n   * @return {Function}           Handler function.\n   */\n  onResizeHandler(handlerName) {\n    var me = this;\n    return function(e, {element, size}) {\n      if (!me.props[handlerName]) return;\n\n      // Get new XY\n      var {w, h} = me.calcWH(size);\n\n      // Cap w at numCols\n      w = Math.min(w, me.props.cols - me.props.x);\n      // Ensure w is at least 1\n      w = Math.max(w, 1);\n\n      // Min/max capping\n      w = Math.max(Math.min(w, me.props.maxW), me.props.minW);\n      h = Math.max(Math.min(h, me.props.maxH), me.props.minH);\n\n      me.setState({resizing: handlerName === 'onResizeStop' ? null : size});\n\n      me.props[handlerName](me.props.i, w, h, {e, element, size});\n    };\n  },\n\n  render() {\n    var p = this.props, pos = this.calcPosition(p.x, p.y, p.w, p.h);\n    if (this.state.resizing) {\n      pos.width = this.state.resizing.width;\n      pos.height = this.state.resizing.height;\n    }\n\n    // Create the child element. We clone the existing element but modify its className and style.\n    var child = cloneWithProps(this.props.children, {\n      // Munge a classname. Use passed in classnames and resizing.\n      // React with merge the classNames.\n      className: ['react-grid-item', this.props.className, this.state.resizing ? 'resizing' : '',\n        this.props.useCSSTransforms ? 'cssTransforms' : ''].join(' '),\n      // We can set the width and height on the child, but unfortunately we can't set the position.\n      style: this.createStyle(pos)\n    });\n\n    // Resizable support. This is usually on but the user can toggle it off.\n    if (this.props.isResizable) {\n      child = this.mixinResizable(child, pos);\n    }\n\n    // Draggable support. This is always on, except for with placeholders.\n    if (this.props.isDraggable) {\n      child = this.mixinDraggable(child, pos);\n    }\n\n    return child;\n  }\n});\n\nfunction constraintError(name, props) {\n  delete props.children;\n  throw new Error(name + ' overrides contraints on gridItem ' + props.i + '. Full props: ' + JSON.stringify(props));\n}\n\nmodule.exports = GridItem;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/GridItem.jsx\n **/","'use strict';\nvar React = require('react');\nvar utils = require('./utils');\nvar responsiveUtils = require('./responsiveUtils');\nvar PureDeepRenderMixin = require('./mixins/PureDeepRenderMixin');\nvar WidthListeningMixin = require('./mixins/WidthListeningMixin');\nvar ReactGridLayout = require('./ReactGridLayout');\n\n/**\n * A wrapper around ReactGridLayout to support responsive breakpoints.\n */\nvar ResponsiveReactGridLayout = React.createClass({\n  mixins: [PureDeepRenderMixin, WidthListeningMixin],\n\n  propTypes: {\n    //\n    // Basic props\n    //\n\n    // Optional, but if you are managing width yourself you may want to set the breakpoint\n    // yourself as well.\n    breakpoint: React.PropTypes.string,\n\n    // {name: pxVal}, e.g. {lg: 1200, md: 996, sm: 768, xs: 480}\n    breakpoints: React.PropTypes.object,\n\n    // # of cols. This is a breakpoint -> cols map\n    cols: React.PropTypes.object,\n\n    // layouts is an object mapping breakpoints to layouts.\n    // e.g. {lg: Layout, md: Layout, ...}\n    layouts: function(props, propName, componentName) {\n      React.PropTypes.object.isRequired.apply(this, arguments);\n\n      var layouts = props.layouts;\n      Object.keys(layouts).map(function(k) {\n        utils.validateLayout(layouts[k], 'layouts.' + k);\n      });\n    },\n\n    //\n    // Callbacks\n    //\n\n    // Calls back with breakpoint and new # cols\n    onBreakpointChange: React.PropTypes.func,\n\n    // Callback so you can save the layout.\n    // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n    onLayoutChange: React.PropTypes.func\n  },\n\n  getDefaultProps() {\n    return {\n      breakpoints: {lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0},\n      cols: {lg: 12, md: 10, sm: 6, xs: 4, xxs: 2},\n      layouts: {},\n      onBreakpointChange: function(){},\n      onLayoutChange: function(){}\n    };\n  },\n\n  getInitialState() {\n    var breakpoint = this.props.breakpoint ||\n      responsiveUtils.getBreakpointFromWidth(this.props.breakpoints, this.props.initialWidth);\n    var cols = responsiveUtils.getColsFromBreakpoint(breakpoint, this.props.cols);\n\n    // Get the initial layout. This can tricky; we try to generate one however possible if one doesn't exist\n    // for this layout.\n    var initialLayout = responsiveUtils.findOrGenerateResponsiveLayout(\n      this.props.layouts, this.props.breakpoints, breakpoint, breakpoint, cols, this.props.verticalCompact);\n\n    return {\n      layout: initialLayout,\n      // storage for layouts obsoleted by breakpoints\n      layouts: this.props.layouts || {},\n      breakpoint: breakpoint,\n      cols: cols,\n      width: this.props.initialWidth\n    };\n  },\n\n  componentWillReceiveProps(nextProps) {\n    // This allows you to set the width manually if you like.\n    // Use manual width changes in combination with `listenToWindowResize: false`\n    if (nextProps.width) this.onWidthChange(nextProps.width);\n\n    // Allow parent to set breakpoint directly.\n    if (nextProps.breakpoint !== this.props.breakpoint) {\n      this.onWidthChange(this.state.width);\n    }\n\n    // Allow parent to set layouts directly.\n    if (nextProps.layouts && nextProps.layouts !== this.state.layouts) {\n      // Since we're setting an entirely new layout object, we must generate a new responsive layout\n      // if one does not exist.\n      var newLayout = responsiveUtils.findOrGenerateResponsiveLayout(\n        nextProps.layouts, nextProps.breakpoints, this.state.breakpoint, this.state.breakpoint, this.state.cols, this.props.verticalLayout);\n\n      this.setState({\n        layouts: nextProps.layouts,\n        layout: newLayout\n      });\n    }\n  },\n\n  /**\n   * Bubble this up, add `layouts` object.\n   * @param  {Array} layout Layout from inner Grid.\n   */\n  onLayoutChange(layout) {\n    this.state.layouts[this.state.breakpoint] = layout;\n    this.setState({layout: layout, layouts: this.state.layouts});\n    this.props.onLayoutChange(layout, this.state.layouts);\n  },\n\n  /**\n   * When the width changes work through breakpoints and reset state with the new width & breakpoint.\n   * Width changes are necessary to figure out the widget widths.\n   */\n  onWidthChange(width) {\n    // Set new breakpoint\n    var newState = {width: width};\n    newState.breakpoint = this.props.breakpoint ||\n      responsiveUtils.getBreakpointFromWidth(this.props.breakpoints, newState.width);\n    newState.cols = responsiveUtils.getColsFromBreakpoint(newState.breakpoint, this.props.cols);\n\n    // Breakpoint change\n    if (newState.cols !== this.state.cols) {\n\n      // Store the current layout\n      newState.layouts = this.state.layouts;\n      newState.layouts[this.state.breakpoint] = JSON.parse(JSON.stringify(this.state.layout));\n\n      // Find or generate a new one.\n      newState.layout = responsiveUtils.findOrGenerateResponsiveLayout(\n        newState.layouts, this.props.breakpoints, newState.breakpoint, this.state.breakpoint, newState.cols, this.props.verticalLayout);\n\n      // This adds missing items.\n      newState.layout = utils.synchronizeLayoutWithChildren(newState.layout, this.props.children, newState.cols, this.props.verticalCompact);\n\n      // Store this new layout as well.\n      newState.layouts[newState.breakpoint] = newState.layout;\n\n      this.props.onBreakpointChange(newState.breakpoint, newState.cols);\n    }\n\n    this.setState(newState);\n  },\n\n\n  render() {\n    // Don't pass responsive props to RGL.\n    /*jshint unused:false*/\n    var {layouts, onBreakpointChange, breakpoints, ...props} = this.props;\n    return (\n      <ReactGridLayout {...props}\n          layout={this.state.layout}\n          cols={this.state.cols}\n          listenToWindowResize={false}\n          onLayoutChange={this.onLayoutChange}\n          width={this.state.width}>\n        {this.props.children}\n      </ReactGridLayout>\n    );\n  }\n});\n\nmodule.exports = ResponsiveReactGridLayout;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/ResponsiveReactGridLayout.jsx\n **/","'use strict';\n\nvar utils = require('./utils');\n\nvar responsiveUtils = module.exports = {\n\n  /**\n   * Given a width, find the highest breakpoint that matches is valid for it (width > breakpoint).\n   *\n   * @param  {Object} breakpoints Breakpoints object (e.g. {lg: 1200, md: 960, ...})\n   * @param  {Number} width Screen width.\n   * @return {String}       Highest breakpoint that is less than width.\n   */\n  getBreakpointFromWidth(breakpoints, width) {\n    var sorted = responsiveUtils.sortBreakpoints(breakpoints);\n    var matching = sorted[0];\n    for (var i = 1, len = sorted.length; i < len; i++) {\n      var breakpointName = sorted[i];\n      if (width > breakpoints[breakpointName]) matching = breakpointName;\n    }\n    return matching;\n  },\n\n\n  /**\n   * Given a breakpoint, get the # of cols set for it.\n   * @param  {String} breakpoint Breakpoint name.\n   * @param  {Object} cols       Map of breakpoints to cols.\n   * @return {Number}            Number of cols.\n   */\n  getColsFromBreakpoint(breakpoint, cols) {\n    if (!cols[breakpoint]) {\n      throw new Error(\"ResponsiveReactGridLayout: `cols` entry for breakpoint \" + breakpoint + \" is missing!\");\n    }\n    return cols[breakpoint];\n  },\n\n  /**\n   * Given existing layouts and a new breakpoint, find or generate a new layout.\n   *\n   * This finds the layout above the new one and generates from it, if it exists.\n   *\n   * @param  {Array} layouts     Existing layouts.\n   * @param  {Array} breakpoints All breakpoints.\n   * @param  {String} breakpoint New breakpoint.\n   * @param  {String} breakpoint Last breakpoint (for fallback).\n   * @param  {Number} cols       Column count at new breakpoint.\n   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n   *   vertically.\n   * @return {Array}             New layout.\n   */\n  findOrGenerateResponsiveLayout(layouts, breakpoints, breakpoint, lastBreakpoint, cols, verticalCompact) {\n    // If it already exists, just return it.\n    if (layouts[breakpoint]) return layouts[breakpoint];\n    // Find or generate the next layout\n    var layout = layouts[lastBreakpoint];\n    var breakpointsSorted = responsiveUtils.sortBreakpoints(breakpoints);\n    var breakpointsAbove = breakpointsSorted.slice(breakpointsSorted.indexOf(breakpoint));\n    for (var i = 0, len = breakpointsAbove.length; i < len; i++) {\n      var b = breakpointsAbove[i];\n      if (layouts[b]) {\n        layout = layouts[b];\n        break;\n      }\n    }\n    layout = JSON.parse(JSON.stringify(layout || [])); // clone layout so we don't modify existing items\n    return utils.compact(utils.correctBounds(layout, {cols: cols}), verticalCompact);\n  },\n\n\n  /**\n   * Given breakpoints, return an array of breakpoints sorted by width. This is usually\n   * e.g. ['xxs', 'xs', 'sm', ...]\n   *\n   * @param  {Object} breakpoints Key/value pair of breakpoint names to widths.\n   * @return {Array}              Sorted breakpoints.\n   */\n  sortBreakpoints(breakpoints) {\n    var keys = Object.keys(breakpoints);\n    return keys.sort(function(a, b) {\n      return breakpoints[a] - breakpoints[b];\n    });\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/responsiveUtils.js\n **/","'use strict';\nmodule.exports = function() {\n  throw new Error(\"Don't instantiate Resizable directly! Use require('react-resizable').Resizable\");\n};\n\nmodule.exports.Resizable = require('./build/Resizable');\nmodule.exports.ResizableBox = require('./build/ResizableBox');\n\n\n\n/** WEBPACK FOOTER **\n ** ../react-resizable/index.js\n **/","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/deep-equal/index.js\n ** module id = 13\n ** module chunks = 0\n **/","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/deep-equal/lib/is_arguments.js\n ** module id = 14\n ** module chunks = 0\n **/","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/deep-equal/lib/keys.js\n ** module id = 15\n ** module chunks = 0\n **/","'use strict';\r\nvar React    = require('react')\r\n  , hasOwn   = Object.prototype.hasOwnProperty\r\n  , version  = React.version.split('.').map(parseFloat)\r\n  , RESERVED = {\r\n      className:  resolve(joinClasses),\r\n      children:   function(){},\r\n      key:        function(){},\r\n      ref:        function(){},\r\n      style:      resolve(extend)\r\n    };\r\n\r\nmodule.exports = function cloneWithProps(child, props) {\r\n  var newProps = mergeProps(props, child.props);\r\n\r\n  if (!hasOwn.call(newProps, 'children') && hasOwn.call(child.props, 'children'))\r\n    newProps.children = child.props.children;\r\n\r\n  // < 0.11\r\n  if (version[0] === 0 && version[1] < 11)\r\n    return child.constructor.ConvenienceConstructor(newProps);\r\n  \r\n  // 0.11\r\n  if (version[0] === 0 && version[1] === 11)\r\n    return child.constructor(newProps);\r\n\r\n  // 0.12\r\n  else if (version[0] === 0 && version[1] === 12){\r\n    MockLegacyFactory.isReactLegacyFactory = true\r\n    MockLegacyFactory.type = child.type\r\n    return React.createElement(MockLegacyFactory, newProps);\r\n  }\r\n\r\n  // 0.13+\r\n  return React.createElement(child.type, newProps);\r\n\r\n  function MockLegacyFactory(){}\r\n}\r\n\r\nfunction mergeProps(currentProps, childProps) {\r\n  var newProps = extend(currentProps), key\r\n\r\n  for (key in childProps) {\r\n    if (hasOwn.call(RESERVED, key) )\r\n      RESERVED[key](newProps, childProps[key], key)\r\n\r\n    else if ( !hasOwn.call(newProps, key) )\r\n      newProps[key] = childProps[key];\r\n  }\r\n  return newProps\r\n}\r\n\r\nfunction resolve(fn){\r\n  return function(src, value, key){\r\n    if( !hasOwn.call(src, key)) src[key] = value\r\n    else src[key] = fn(src[key], value)\r\n  }\r\n}\r\n\r\nfunction joinClasses(a, b){\r\n  if ( !a ) return b || ''\r\n  return a + (b ? ' ' + b : '')\r\n}\r\n\r\nfunction extend() {\r\n  var target = {};\r\n  for (var i = 0; i < arguments.length; i++) \r\n    for (var key in arguments[i]) if (hasOwn.call(arguments[i], key)) \r\n      target[key] = arguments[i][key]   \r\n  return target\r\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/cloneWithProps.js\n ** module id = 17\n ** module chunks = 0\n **/","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule shallowEqual\n */\n\n'use strict';\n\n/**\n * Performs equality by iterating through keys on an object and returning\n * false when any key has values which are not strictly equal between\n * objA and objB. Returns true when the values of all keys are strictly equal.\n *\n * @return {boolean}\n */\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n  var key;\n  // Test for A's keys different from B.\n  for (key in objA) {\n    if (objA.hasOwnProperty(key) &&\n        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {\n      return false;\n    }\n  }\n  // Test for B's keys missing from A.\n  for (key in objB) {\n    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = shallowEqual;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/shallowEqual.js\n ** module id = 18\n ** module chunks = 0\n **/","'use strict';\n\nvar _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };\n\nvar _slicedToArray = function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar React = require('react');\nvar Resizable = require('./Resizable');\nvar PureRenderMixin = require('react/lib/ReactComponentWithPureRenderMixin');\n\n// An example use of Resizable.\nvar ResizableBox = module.exports = React.createClass({\n  displayName: 'ResizableBox',\n  mixins: [PureRenderMixin],\n\n  propTypes: {\n    lockAspectRatio: React.PropTypes.bool\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      lockAspectRatio: false,\n      handleSize: [20, 20]\n    };\n  },\n\n  getInitialState: function getInitialState() {\n    return {\n      width: this.props.width,\n      height: this.props.height,\n      aspectRatio: this.props.width / this.props.height\n    };\n  },\n\n  onResize: function onResize(event, _ref) {\n    var element = _ref.element;\n    var size = _ref.size;\n    var width = size.width;\n    var height = size.height;\n\n    var widthChanged = width !== this.state.width,\n        heightChanged = height !== this.state.height;\n    if (!widthChanged && !heightChanged) {\n      return;\n    }if (this.props.lockAspectRatio) {\n      var _preserveAspectRatio = this.preserveAspectRatio(width, height);\n\n      var _preserveAspectRatio2 = _slicedToArray(_preserveAspectRatio, 2);\n\n      width = _preserveAspectRatio2[0];\n      height = _preserveAspectRatio2[1];\n    }\n\n    this.setState({ width: width, height: height });\n  },\n\n  // If you do this, be careful of constraints\n  preserveAspectRatio: function preserveAspectRatio(width, height) {\n    var min = this.props.minConstraints;\n    var max = this.props.maxConstraints;\n\n    height = width / this.state.aspectRatio;\n    width = height * this.state.aspectRatio;\n\n    if (min) {\n      width = Math.max(min[0], width);\n      height = Math.max(min[1], height);\n    }\n    if (max) {\n      width = Math.min(max[0], width);\n      height = Math.min(max[1], height);\n    }\n    return [width, height];\n  },\n\n  render: function render() {\n    // Basic wrapper around a Resizable instance.\n    // If you use Resizable directly, you are responsible for updating the component\n    // with a new width and height.\n    var _props = this.props;\n    var handleSize = _props.handleSize;\n    var minConstraints = _props.minConstraints;\n    var maxConstraints = _props.maxConstraints;\n\n    var props = _objectWithoutProperties(_props, ['handleSize', 'minConstraints', 'maxConstraints']);\n\n    return React.createElement(\n      Resizable,\n      {\n        minConstraints: minConstraints,\n        maxConstraints: maxConstraints,\n        handleSize: handleSize,\n        width: this.state.width,\n        height: this.state.height,\n        onResize: this.onResize,\n        draggableOpts: this.props.draggableOpts\n      },\n      React.createElement(\n        'div',\n        _extends({ style: { width: this.state.width + 'px', height: this.state.height + 'px' } }, props),\n        this.props.children\n      )\n    );\n  }\n});\n\n\n/** WEBPACK FOOTER **\n ** ../react-resizable/build/ResizableBox.js\n **/","'use strict';\n\nvar assign = require('object-assign');\nvar React = require('react');\n\nmodule.exports = function cloneElement(element, props) {\n  if (props.style && element.props.style) {\n    props.style = assign({}, element.props.style, props.style);\n  }\n  if (props.className && element.props.className) {\n    props.className = element.props.className + ' ' + props.className;\n  }\n  return React.cloneElement(element, props);\n};\n\n\n/** WEBPACK FOOTER **\n ** ../react-resizable/build/cloneElement.js\n **/","module.exports = require('./lib/draggable');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../react-resizable/~/react-draggable/index.js\n ** module id = 21\n ** module chunks = 0\n **/","'use strict';\n\nvar React = require('react');\nvar emptyFunction = function(){};\nvar assign = require('object-assign');\nvar classNames = require('classnames');\n\n//\n// Helpers. See Element definition below this section.\n//\n\nfunction createUIEvent(draggable) {\n  // State changes are often (but not always!) async. We want the latest value.\n  var state = draggable._pendingState || draggable.state;\n  return {\n    node: draggable.getDOMNode(),\n    position: {\n      top: state.clientY,\n      left: state.clientX\n    }\n  };\n}\n\nfunction canDragY(draggable) {\n  return draggable.props.axis === 'both' ||\n      draggable.props.axis === 'y';\n}\n\nfunction canDragX(draggable) {\n  return draggable.props.axis === 'both' ||\n      draggable.props.axis === 'x';\n}\n\nfunction isFunction(func) {\n  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';\n}\n\n// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc\nfunction findInArray(array, callback) {\n  for (var i = 0, length = array.length; i < length; i++) {\n    if (callback.apply(callback, [array[i], i, array])) return array[i];\n  }\n}\n\nfunction matchesSelector(el, selector) {\n  var method = findInArray([\n    'matches',\n    'webkitMatchesSelector',\n    'mozMatchesSelector',\n    'msMatchesSelector',\n    'oMatchesSelector'\n  ], function(method){\n    return isFunction(el[method]);\n  });\n\n  return el[method].call(el, selector);\n}\n\n/**\n * simple abstraction for dragging events names\n * */\nvar eventsFor = {\n  touch: {\n    start: 'touchstart',\n    move: 'touchmove',\n    end: 'touchend'\n  },\n  mouse: {\n    start: 'mousedown',\n    move: 'mousemove',\n    end: 'mouseup'\n  }\n};\n\n// Default to mouse events\nvar dragEventFor = eventsFor['mouse'];\n\n/**\n * get {clientX, clientY} positions of control\n * */\nfunction getControlPosition(e) {\n  var position = (e.touches && e.touches[0]) || e;\n  return {\n    clientX: position.clientX,\n    clientY: position.clientY\n  };\n}\n\nfunction addEvent(el, event, handler) {\n  if (!el) { return; }\n  if (el.attachEvent) {\n    el.attachEvent('on' + event, handler);\n  } else if (el.addEventListener) {\n    el.addEventListener(event, handler, true);\n  } else {\n    el['on' + event] = handler;\n  }\n}\n\nfunction removeEvent(el, event, handler) {\n  if (!el) { return; }\n  if (el.detachEvent) {\n    el.detachEvent('on' + event, handler);\n  } else if (el.removeEventListener) {\n    el.removeEventListener(event, handler, true);\n  } else {\n    el['on' + event] = null;\n  }\n}\n\nfunction outerHeight(node) {\n  // This is deliberately excluding margin for our calculations, since we are using\n  // offsetTop which is including margin. See getBoundPosition\n  var height = node.clientHeight;\n  var computedStyle = window.getComputedStyle(node);\n  height += int(computedStyle.borderTopWidth);\n  height += int(computedStyle.borderBottomWidth);\n  return height;\n}\n\nfunction outerWidth(node) {\n  // This is deliberately excluding margin for our calculations, since we are using\n  // offsetLeft which is including margin. See getBoundPosition\n  var width = node.clientWidth;\n  var computedStyle = window.getComputedStyle(node);\n  width += int(computedStyle.borderLeftWidth);\n  width += int(computedStyle.borderRightWidth);\n  return width;\n}\nfunction innerHeight(node) {\n  var height = node.clientHeight;\n  var computedStyle = window.getComputedStyle(node);\n  height -= int(computedStyle.paddingTop);\n  height -= int(computedStyle.paddingBottom);\n  return height;\n}\n\nfunction innerWidth(node) {\n  var width = node.clientWidth;\n  var computedStyle = window.getComputedStyle(node);\n  width -= int(computedStyle.paddingLeft);\n  width -= int(computedStyle.paddingRight);\n  return width;\n}\n\nfunction isNum(num) {\n  return typeof num === 'number' && !isNaN(num);\n}\n\nfunction int(a) {\n  return parseInt(a, 10);\n}\n\nfunction getBoundPosition(draggable, clientX, clientY) {\n  var bounds = JSON.parse(JSON.stringify(draggable.props.bounds));\n  var node = draggable.getDOMNode();\n  var parent = node.parentNode;\n\n  if (bounds === 'parent') {\n    var nodeStyle = window.getComputedStyle(node);\n    var parentStyle = window.getComputedStyle(parent);\n    // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.\n    bounds = {\n      left: -node.offsetLeft + int(parentStyle.paddingLeft) +\n            int(nodeStyle.borderLeftWidth) + int(nodeStyle.marginLeft),\n      top: -node.offsetTop + int(parentStyle.paddingTop) +\n            int(nodeStyle.borderTopWidth) + int(nodeStyle.marginTop),\n      right: innerWidth(parent) - outerWidth(node) - node.offsetLeft,\n      bottom: innerHeight(parent) - outerHeight(node) - node.offsetTop\n    };\n  }\n\n  // Keep x and y below right and bottom limits...\n  if (isNum(bounds.right)) clientX = Math.min(clientX, bounds.right);\n  if (isNum(bounds.bottom)) clientY = Math.min(clientY, bounds.bottom);\n\n  // But above left and top limits.\n  if (isNum(bounds.left)) clientX = Math.max(clientX, bounds.left);\n  if (isNum(bounds.top)) clientY = Math.max(clientY, bounds.top);\n\n  return [clientX, clientY];\n}\n\nfunction snapToGrid(grid, pendingX, pendingY) {\n  var x = Math.round(pendingX / grid[0]) * grid[0];\n  var y = Math.round(pendingY / grid[1]) * grid[1];\n  return [x, y];\n}\n\n// Useful for preventing blue highlights all over everything when dragging.\nvar userSelectStyle = ';user-select: none;-webkit-user-select:none;-moz-user-select:none;' +\n  '-o-user-select:none;-ms-user-select:none;';\n\nfunction addUserSelectStyles(draggable) {\n  if (!draggable.props.enableUserSelectHack) return;\n  var style = document.body.getAttribute('style') || '';\n  document.body.setAttribute('style', style + userSelectStyle);\n}\n\nfunction removeUserSelectStyles(draggable) {\n  if (!draggable.props.enableUserSelectHack) return;\n  var style = document.body.getAttribute('style') || '';\n  document.body.setAttribute('style', style.replace(userSelectStyle, ''));\n}\n\nfunction createCSSTransform(style) {\n  // Replace unitless items with px\n  var x = style.x + 'px';\n  var y = style.y + 'px';\n  return {\n    transform: 'translate(' + x + ',' + y + ')',\n    WebkitTransform: 'translate(' + x + ',' + y + ')',\n    OTransform: 'translate(' + x + ',' + y + ')',\n    msTransform: 'translate(' + x + ',' + y + ')',\n    MozTransform: 'translate(' + x + ',' + y + ')'\n  };\n}\n\n\n//\n// End Helpers.\n//\n\n//\n// Define <Draggable>\n//\n\nmodule.exports = React.createClass({\n  displayName: 'Draggable',\n\n  propTypes: {\n    /**\n     * `axis` determines which axis the draggable can move.\n     *\n     * 'both' allows movement horizontally and vertically.\n     * 'x' limits movement to horizontal axis.\n     * 'y' limits movement to vertical axis.\n     *\n     * Defaults to 'both'.\n     */\n    axis: React.PropTypes.oneOf(['both', 'x', 'y']),\n\n    /**\n     * `bounds` determines the range of movement available to the element.\n     * Available values are:\n     *\n     * 'parent' restricts movement within the Draggable's parent node.\n     *\n     * Alternatively, pass an object with the following properties, all of which are optional:\n     *\n     * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}\n     *\n     * All values are in px.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   var App = React.createClass({\n     *       render: function () {\n     *         return (\n     *            <Draggable bounds={{right: 300, bottom: 300}}>\n     *              <div>Content</div>\n     *           </Draggable>\n     *         );\n     *       }\n     *   });\n     * ```\n     */\n    bounds: React.PropTypes.oneOfType([\n      React.PropTypes.shape({\n        left: React.PropTypes.Number,\n        right: React.PropTypes.Number,\n        top: React.PropTypes.Number,\n        bottom: React.PropTypes.Number\n      }),\n      React.PropTypes.oneOf(['parent', false])\n    ]),\n\n    /**\n     * By default, we add 'user-select:none' attributes to the document body\n     * to prevent ugly text selection during drag. If this is causing problems\n     * for your app, set this to `false`.\n     */\n    enableUserSelectHack: React.PropTypes.bool,\n\n    /**\n     * `handle` specifies a selector to be used as the handle that initiates drag.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   var App = React.createClass({\n     *       render: function () {\n     *         return (\n     *            <Draggable handle=\".handle\">\n     *              <div>\n     *                  <div className=\"handle\">Click me to drag</div>\n     *                  <div>This is some other content</div>\n     *              </div>\n     *           </Draggable>\n     *         );\n     *       }\n     *   });\n     * ```\n     */\n    handle: React.PropTypes.string,\n\n    /**\n     * `cancel` specifies a selector to be used to prevent drag initialization.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   var App = React.createClass({\n     *       render: function () {\n     *           return(\n     *               <Draggable cancel=\".cancel\">\n     *                   <div>\n     *                     <div className=\"cancel\">You can't drag from here</div>\n     *            <div>Dragging here works fine</div>\n     *                   </div>\n     *               </Draggable>\n     *           );\n     *       }\n     *   });\n     * ```\n     */\n    cancel: React.PropTypes.string,\n\n    /**\n     * `grid` specifies the x and y that dragging should snap to.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   var App = React.createClass({\n     *       render: function () {\n     *           return (\n     *               <Draggable grid={[25, 25]}>\n     *                   <div>I snap to a 25 x 25 grid</div>\n     *               </Draggable>\n     *           );\n     *       }\n     *   });\n     * ```\n     */\n    grid: React.PropTypes.arrayOf(React.PropTypes.number),\n\n    /**\n     * `start` specifies the x and y that the dragged item should start at\n     *\n     * Example:\n     *\n     * ```jsx\n     *      var App = React.createClass({\n     *          render: function () {\n     *              return (\n     *                  <Draggable start={{x: 25, y: 25}}>\n     *                      <div>I start with transformX: 25px and transformY: 25px;</div>\n     *                  </Draggable>\n     *              );\n     *          }\n     *      });\n     * ```\n     */\n    start: React.PropTypes.shape({\n      x: React.PropTypes.number,\n      y: React.PropTypes.number\n    }),\n\n    /**\n     * `moveOnStartChange`, if true (default false) will move the element if the `start`\n     * property changes.\n     */\n    moveOnStartChange: React.PropTypes.bool,\n\n\n    /**\n     * `zIndex` specifies the zIndex to use while dragging.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   var App = React.createClass({\n     *       render: function () {\n     *           return (\n     *               <Draggable zIndex={100}>\n     *                   <div>I have a zIndex</div>\n     *               </Draggable>\n     *           );\n     *       }\n     *   });\n     * ```\n     */\n    zIndex: React.PropTypes.number,\n\n    /**\n     * Called when dragging starts.\n     * If this function returns the boolean false, dragging will be canceled.\n     *\n     * Example:\n     *\n     * ```js\n     *  function (event, ui) {}\n     * ```\n     *\n     * `event` is the Event that was triggered.\n     * `ui` is an object:\n     *\n     * ```js\n     *  {\n     *    position: {top: 0, left: 0}\n     *  }\n     * ```\n     */\n    onStart: React.PropTypes.func,\n\n    /**\n     * Called while dragging.\n     * If this function returns the boolean false, dragging will be canceled.\n     *\n     * Example:\n     *\n     * ```js\n     *  function (event, ui) {}\n     * ```\n     *\n     * `event` is the Event that was triggered.\n     * `ui` is an object:\n     *\n     * ```js\n     *  {\n     *    position: {top: 0, left: 0}\n     *  }\n     * ```\n     */\n    onDrag: React.PropTypes.func,\n\n    /**\n     * Called when dragging stops.\n     *\n     * Example:\n     *\n     * ```js\n     *  function (event, ui) {}\n     * ```\n     *\n     * `event` is the Event that was triggered.\n     * `ui` is an object:\n     *\n     * ```js\n     *  {\n     *    position: {top: 0, left: 0}\n     *  }\n     * ```\n     */\n    onStop: React.PropTypes.func,\n\n    /**\n     * A workaround option which can be passed if onMouseDown needs to be accessed,\n     * since it'll always be blocked (due to that there's internal use of onMouseDown)\n     */\n    onMouseDown: React.PropTypes.func,\n  },\n\n  componentWillReceiveProps: function(newProps) {\n    // React to changes in the 'start' param.\n    if (newProps.moveOnStartChange && newProps.start) {\n      this.setState(this.getInitialState(newProps));\n    }\n  },\n\n  componentWillUnmount: function() {\n    // Remove any leftover event handlers\n    removeEvent(document, dragEventFor['move'], this.handleDrag);\n    removeEvent(document, dragEventFor['end'], this.handleDragEnd);\n    removeUserSelectStyles(this);\n  },\n\n  getDefaultProps: function () {\n    return {\n      axis: 'both',\n      bounds: false,\n      handle: null,\n      cancel: null,\n      grid: null,\n      moveOnStartChange: false,\n      start: {x: 0, y: 0},\n      zIndex: NaN,\n      enableUserSelectHack: true,\n      onStart: emptyFunction,\n      onDrag: emptyFunction,\n      onStop: emptyFunction,\n      onMouseDown: emptyFunction\n    };\n  },\n\n  getInitialState: function (props) {\n    // Handle call from CWRP\n    props = props || this.props;\n    return {\n      // Whether or not we are currently dragging.\n      dragging: false,\n\n      // Offset between start top/left and mouse top/left while dragging.\n      offsetX: 0, offsetY: 0,\n\n      // Current transform x and y.\n      clientX: props.start.x, clientY: props.start.y\n    };\n  },\n\n  handleDragStart: function (e) {\n    // Make it possible to attach event handlers on top of this one\n    this.props.onMouseDown(e);\n\n    // Short circuit if handle or cancel prop was provided and selector doesn't match\n    if ((this.props.handle && !matchesSelector(e.target, this.props.handle)) ||\n      (this.props.cancel && matchesSelector(e.target, this.props.cancel))) {\n      return;\n    }\n\n    // Call event handler. If it returns explicit false, cancel.\n    var shouldStart = this.props.onStart(e, createUIEvent(this));\n    if (shouldStart === false) return;\n\n    var dragPoint = getControlPosition(e);\n\n    // Add a style to the body to disable user-select. This prevents text from\n    // being selected all over the page.\n    addUserSelectStyles(this);\n\n    // Initiate dragging. Set the current x and y as offsets\n    // so we know how much we've moved during the drag. This allows us\n    // to drag elements around even if they have been moved, without issue.\n    this.setState({\n      dragging: true,\n      offsetX: dragPoint.clientX - this.state.clientX,\n      offsetY: dragPoint.clientY - this.state.clientY\n    });\n\n\n    // Add event handlers\n    addEvent(document, dragEventFor['move'], this.handleDrag);\n    addEvent(document, dragEventFor['end'], this.handleDragEnd);\n  },\n\n  handleDragEnd: function (e) {\n    // Short circuit if not currently dragging\n    if (!this.state.dragging) {\n      return;\n    }\n\n    removeUserSelectStyles(this);\n\n    // Turn off dragging\n    this.setState({\n      dragging: false\n    });\n\n    // Call event handler\n    this.props.onStop(e, createUIEvent(this));\n\n    // Remove event handlers\n    removeEvent(document, dragEventFor['move'], this.handleDrag);\n    removeEvent(document, dragEventFor['end'], this.handleDragEnd);\n  },\n\n  handleDrag: function (e) {\n    var dragPoint = getControlPosition(e);\n\n    // Calculate X and Y\n    var clientX = dragPoint.clientX - this.state.offsetX;\n    var clientY = dragPoint.clientY - this.state.offsetY;\n\n    // Snap to grid if prop has been provided\n    if (Array.isArray(this.props.grid)) {\n      var coords = snapToGrid(this.props.grid, clientX, clientY);\n      clientX = coords[0], clientY = coords[1];\n    }\n\n    if (this.props.bounds) {\n      var pos = getBoundPosition(this, clientX, clientY);\n      clientX = pos[0], clientY = pos[1];\n    }\n\n    // Call event handler. If it returns explicit false, cancel.\n    var shouldUpdate = this.props.onDrag(e, createUIEvent(this));\n    if (shouldUpdate === false) return this.handleDragEnd();\n\n    // Update transform\n    this.setState({\n      clientX: clientX,\n      clientY: clientY\n    });\n  },\n\n  onMouseDown: function(ev) {\n    // Prevent 'ghost click' which happens 300ms after touchstart if the event isn't cancelled.\n    // We don't cancel the event on touchstart because of #37; we might want to make a scrollable item draggable.\n    // More on ghost clicks: http://ariatemplates.com/blog/2014/05/ghost-clicks-in-mobile-browsers/\n    if (dragEventFor == eventsFor['touch']) {\n      return ev.preventDefault();\n    }\n\n    return this.handleDragStart.apply(this, arguments);\n  },\n\n  onTouchStart: function(ev) {\n    // We're on a touch device now, so change the event handlers\n    dragEventFor = eventsFor['touch'];\n\n    return this.handleDragStart.apply(this, arguments);\n  },\n\n  // Intended for use by a parent component. Resets internal state on this component. Useful for\n  // <Resizable> and other components in case this element is manually resized and start/moveOnStartChange\n  // don't work for you.\n  resetState: function() {\n    this.setState({\n      offsetX: 0, offsetY: 0, clientX: 0, clientY: 0\n    });\n  },\n\n  render: function () {\n    // Create style object. We extend from existing styles so we don't\n    // remove anything already set (like background, color, etc).\n    var childStyle = this.props.children.props.style || {};\n\n    // Add a CSS transform to move the element around. This allows us to move the element around\n    // without worrying about whether or not it is relatively or absolutely positioned.\n    // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>\n    // has a clean slate.\n    var transform = createCSSTransform({\n      // Set left if horizontal drag is enabled\n      x: canDragX(this) ?\n        this.state.clientX :\n        0,\n\n      // Set top if vertical drag is enabled\n      y: canDragY(this) ?\n        this.state.clientY :\n        0\n    });\n\n    // Workaround IE pointer events; see #51\n    // https://github.com/mzabriskie/react-draggable/issues/51#issuecomment-103488278\n    var touchHacks = {\n      touchAction: 'none'\n    };\n\n    var style = assign({}, childStyle, transform, touchHacks);\n\n    // Set zIndex if currently dragging and prop has been provided\n    if (this.state.dragging && !isNaN(this.props.zIndex)) {\n      style.zIndex = this.props.zIndex;\n    }\n\n    var className = classNames((this.props.children.props.className || ''), 'react-draggable', {\n      'react-draggable-dragging': this.state.dragging,\n      'react-draggable-dragged': this.state.dragged\n    });\n\n    // Reuse the child provided\n    // This makes it flexible to use whatever element is wanted (div, ul, etc)\n    return React.cloneElement(React.Children.only(this.props.children), {\n      style: style,\n      className: className,\n\n      onMouseDown: this.onMouseDown,\n      onTouchStart: this.onTouchStart,\n      onMouseUp: this.handleDragEnd,\n      onTouchEnd: this.handleDragEnd\n    });\n  }\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../react-resizable/~/react-draggable/lib/draggable.js\n ** module id = 22\n ** module chunks = 0\n **/","/*!\n  Copyright (c) 2015 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n\nfunction classNames() {\n\tvar classes = '';\n\tvar arg;\n\n\tfor (var i = 0; i < arguments.length; i++) {\n\t\targ = arguments[i];\n\t\tif (!arg) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ('string' === typeof arg || 'number' === typeof arg) {\n\t\t\tclasses += ' ' + arg;\n\t\t} else if (Object.prototype.toString.call(arg) === '[object Array]') {\n\t\t\tclasses += ' ' + classNames.apply(null, arg);\n\t\t} else if ('object' === typeof arg) {\n\t\t\tfor (var key in arg) {\n\t\t\t\tif (!arg.hasOwnProperty(key) || !arg[key]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tclasses += ' ' + key;\n\t\t\t}\n\t\t}\n\t}\n\treturn classes.substr(1);\n}\n\n// safely export classNames for node / browserify\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = classNames;\n}\n\n// safely export classNames for RequireJS\nif (typeof define !== 'undefined' && define.amd) {\n\tdefine('classnames', [], function() {\n\t\treturn classNames;\n\t});\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../react-resizable/~/react-draggable/~/classnames/index.js\n ** module id = 23\n ** module chunks = 0\n **/"],"sourceRoot":""}